<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/17/2019 4:02:52 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ONURALIKANBB71"
  DTS:CreatorName="ONURALIKANBB71\projectsit"
  DTS:DTSID="{3700FFA2-73B2-4894-BE6B-91D81316BE14}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1900.73"
  DTS:LocaleID="1055"
  DTS:ObjectName="LoadFileandSheetName"
  DTS:PackageType="5"
  DTS:VersionBuild="219"
  DTS:VersionGUID="{BB8FF9A8-8315-4048-9A0A-AE54956316E9}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DB_Conn_KU]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{1FF8DFA6-6461-47E7-B02E-42C39A1409AF}"
      DTS:ObjectName="DB_Conn_KU">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=ONURALIKANBB71\MSSQLSERVER01;Initial Catalog=KU;Integrated Security=True;Application Name=SSIS-Package-{1FF8DFA6-6461-47E7-B02E-42C39A1409AF}ONURALIKANBB71\MSSQLSERVER01.KU;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ONURALIKANBB71\MSSQLSERVER01.KU1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{B080CC0B-B2F2-49CA-8088-B36F0993BD17}"
      DTS:ObjectName="ONURALIKANBB71\MSSQLSERVER01.KU1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=ONURALIKANBB71\MSSQLSERVER01;Initial Catalog=KU;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F649B084-E897-4611-BFB1-7123A823739B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B7D8DB11-76E5-40AA-9932-3EBF388B73AC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelFile\input</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9D98CDCA-1E97-4582-93B6-1DB247ABF39C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TableName">
      <DTS:VariableValue
        DTS:DataType="8">Customer</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\EXCEL_to_STG"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{C363BE42-B460-4D36-BD5B-E0A7519C2381}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EXCEL_to_STG"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SourceFolder">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Settings.get_Default():ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Sett" +
    "ings")]

namespace ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;

#endregion

namespace ST_3af0e2b1ea9b4f1fb70ab4b5f0862837
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 
        private  void  update_log_status(string p_upd_string ,string p_file_id, string p_error_log, string p_state)
        {

            SqlConnection myLogConnection = new SqlConnection();
            myLogConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            SqlCommand cmd = myLogConnection.CreateCommand();
            if (p_upd_string=="Error")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_err_log"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }
            if (p_upd_string == "Status")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_state"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }

        }
        public void Main()
        {
            string FolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
            string fileFullPath = "";
            string i_FileName, i_SheetName, i_TableName, i_ColumnName, i_fileUrl, i_fileID, SchemaName;
           // string SchemaName = "stg";
            int k = 0;
            int j = 0;
            string connection_string = @"Data Source = ONURALIKANBB71\MSSQLSERVER01; Initial Catalog = KU; Integrated Security = True";

            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            using (SqlConnection sqlcon = new SqlConnection(connection_string))
            {
                sqlcon.Open();
                SqlDataAdapter sqlDA = new SqlDataAdapter("select i.FileName,i.SheetName,TableName,i.ColumnName,i.File_URL,i.FileID,f.SchemaName from dbo.ETL_FileInformation i join  dbo.ETL_FileMap f on i.FileName=f.FileName and i.SheetName=f.SheetName and i.FileStatus='New' ", sqlcon);
                DataTable dta = new DataTable();
                sqlDA.Fill(dta);
                sqlcon.Close();

                int count_sqlDA = dta.Rows.Count;
                for (int y = 0; y < count_sqlDA; y++)
                {  
                   
                    k = k + 1;
                    DataRow drTable = dta.Rows[y];
                    /// string columnvalue = drTable["TABLE_NAME"].ToString();
                   // foreach (DataColumn column in dta.Columns)
                    //{
                        i_FileName = drTable[0].ToString();
                        i_SheetName = drTable[1].ToString();
                        i_TableName = drTable[2].ToString();
                        i_ColumnName = drTable[3].ToString();
                        i_fileUrl = drTable[4].ToString();
                        i_fileID = drTable[5].ToString();
                        SchemaName= drTable[6].ToString();
                        var directory = new DirectoryInfo(FolderPath);
                        FileInfo[] files = directory.GetFiles(i_FileName);
                        //Create Excel Connection
                        fileFullPath = FolderPath + "\\" + i_fileUrl;
                        string StartingColumn = "B";
                    //Provide the end column till which you want to read
                        string EndingColumn = "W";
                    //Provide the row number from which you like to start reading
                        string StartReadingFromRow = "9";
                        string filename = "";
                        filename = i_FileName;
                        string ConStr;
                        string HDR;
                        HDR = "YES";
                        ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=0\"";
                        OleDbConnection cnn = new OleDbConnection(ConStr);

                        //Get Sheet Name
                        cnn.Open();
                        DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                        string sheetname;
                        sheetname = "";

                        int sheet_count = dtSheet.Rows.Count;

                        for (int z = 0; z < sheet_count; z++)
                        {
                        try { 
                            DataRow drSheet1 = dtSheet.Rows[z];
                            if (drSheet1["TABLE_NAME"].ToString().Contains("$"))
                            {
                                sheetname = drSheet1["TABLE_NAME"].ToString();
                                // MessageBox.Show(sheetname);

                                //SheetName Log'u koy

                                if (sheetname == i_SheetName)
                                {
                                    //Load the DataTable with Sheet Data so we can get the column header
                                    OleDbCommand oconn;
                                    //Load the DataTable with Sheet Data so we can get the column header
                                    if (filename == "TRACKIT_YURTLAR_CT.xlsx" || filename == "TRACKIT_SIEMENS.xlsx" || filename == "TRACKIT_YURTLAR.xlsx" || filename == "TRACKIT_IT.xlsx")
                                    {
                                        if (filename == "TRACKIT_YURTLAR.xlsx")
                                        { StartReadingFromRow = "8"; }
                                        else { StartReadingFromRow = "9"; }
                                        oconn = new OleDbCommand("select top 1 *  from [" + sheetname + StartingColumn + StartReadingFromRow + ":" + EndingColumn + "]", cnn);
                                    }
                                    else
                                    {
                                        oconn = new OleDbCommand("select top 1 *  from [" + sheetname + "] ", cnn);
                                    }
                                    OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                                    DataTable dt = new DataTable();
                                    adp.Fill(dt);
                                    cnn.Close();
                                    string SQLQueryToGetMatchingColumn = "";
                                    string ExcelHeaderColumn = "";

                                        for (int i = 0; i < dt.Columns.Count; i++)
                                        {
                                            if (i != dt.Columns.Count - 1)
                                                ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                            else
                                                ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                                        }
                                    


                                    SQLQueryToGetMatchingColumn = "select STUFF((Select  ',['+Column_Name+']' from INFORMATION_SCHEMA.COLUMNS where Table_Name='" +
                                        i_TableName + "' and Table_SChema='" + SchemaName + "'" +
                                        "and Column_Name in (" + @ExcelHeaderColumn + ") ORDER BY ORDINAL_POSITION for xml path('')),1,1,'') AS ColumnList";

                                    // MessageBox.Show(SQLQueryToGetMatchingColumn);
                                    //MessageBox.Show(ExcelHeaderColumn);
                                    string SQLColumnList = "";
                                    SqlCommand cmd = myADONETConnection.CreateCommand();
                                    cmd.CommandText = SQLQueryToGetMatchingColumn;
                                    SQLColumnList = (string)cmd.ExecuteScalar();
                                    // MessageBox.Show(" Matching Columns: " + SQLColumnList);

                                    //Use Actual Matching Columns to get data from Excel Sheet
                                    OleDbConnection cnn1 = new OleDbConnection(ConStr);
                                    cnn1.Open();
                                    OleDbCommand oconn1;
                                    //+StartingColumn + StartReadingFromRow + ":" + EndingColumn + "]"
                                    if (filename == "TRACKIT_YURTLAR_CT.xlsx" || filename == "TRACKIT_SIEMENS.xlsx" || filename == "TRACKIT_YURTLAR.xlsx" || filename == "TRACKIT_IT.xlsx")
                                    {
                                         oconn1 = new OleDbCommand("select " + SQLColumnList + " from [" + sheetname + StartingColumn + StartReadingFromRow + ":" + EndingColumn + "]", cnn1);
                                    }
                                    else
                                    {
                                        oconn1 = new OleDbCommand("select " + SQLColumnList + " from [" + sheetname + "]", cnn1);
                                    }


                                    // OleDbCommand oconn1 = new OleDbCommand("select " + SQLColumnList + ",'" + filename + "' AS FileName" + ",'" + sheetname + "' AS SheetName from [" + sheetname + "]", cnn1);



                             
                                    OleDbDataAdapter adp1 = new OleDbDataAdapter(oconn1);
                                    DataTable dt1 = new DataTable();
                                    adp1.Fill(dt1);
                                        //                DataRow drTable1 = dt1.Rows[6];
                                /// string columnvalue = drTable["TABLE_NAME"].ToString();
                                // foreach (DataColumn column in dta.Columns)
                                //{
                                //string a_FileName = drTable1[0].ToString();
                                //string a_SheetName = drTable1[1].ToString();
                                //string ac_FileName = drTable1[2].ToString();
                               // string ac_SheetName = drTable1[3].ToString();

                                cnn1.Close();
                                // Truncate table
                                
                                using (SqlCommand query_s_truncate = new SqlCommand("sp_truncate_table"))
                                {

                                    cmd.CommandType = CommandType.StoredProcedure;
                           
                                    query_s_truncate.Connection = myADONETConnection;
                                    query_s_truncate.CommandType= CommandType.StoredProcedure;
                                    query_s_truncate.Parameters.AddWithValue("@dbname", "KU");
                                    query_s_truncate.Parameters.AddWithValue("@tablename", SchemaName+"." +i_TableName);
                                    //myADONETConnection.Open();
                                    query_s_truncate.ExecuteNonQuery();
                                }
                                //Load Data from DataTable to SQL Server Table.
                                try
                                {
                                    using (SqlBulkCopy BC = new SqlBulkCopy(myADONETConnection))
                                    {
                                        BC.DestinationTableName = SchemaName + "." + i_TableName;
                                        foreach (var column1 in dt1.Columns)
                                            BC.ColumnMappings.Add(column1.ToString(), column1.ToString());
                                        BC.WriteToServer(dt1);
                                        update_log_status("Status", i_fileID, "", "STG");
                                    }

                                }
                                catch (Exception ex)
                                {
                                    string hata = ex.Message.ToString();
                                    update_log_status("Error", i_fileID, hata, "ERR");
                                }


                                }
                            }
                            }catch (Exception ex)
                            { 
                            string a = ex.Message.ToString();
                            if(a== "Unable to cast object of type 'System.DBNull' to type 'System.String'.")
                            {
                                a = a + " " + i_TableName + "tablosunu kontrol ediniz.";
                            }
                            }
                        }                            

                        //foreach (DataRow drSheet in dtSheet.Rows)
                        //{
                        //    j = j + 1;
                        //    if (drSheet["TABLE_NAME"].ToString().Contains("$"))
                        //    {
                        //        sheetname = drSheet["TABLE_NAME"].ToString();
                        //        // MessageBox.Show(sheetname);

                        //        //SheetName Log'u koy

                        //        if (sheetname == i_SheetName)
                        //        {
                        //            string atr = "";
                        //            /*
                        //            //Load the DataTable with Sheet Data so we can get the column header
                        //            OleDbCommand oconn = new OleDbCommand("select top 1 * from [" + sheetname + "]", cnn);
                        //            OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                        //            DataTable dt = new DataTable();
                        //            adp.Fill(dt);
                        //            cnn.Close();
                        //            string ExcelHeaderColumn = "";
                        //            string SQLQueryToGetMatchingColumn = "";
                        //            for (int i = 0; i < dt.Columns.Count; i++)
                        //            {
                        //                if (i != dt.Columns.Count - 1)
                        //                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                        //                else
                        //                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                        //            }

                        //            SQLQueryToGetMatchingColumn = "select STUFF((Select  ',['+Column_Name+']' from INFORMATION_SCHEMA.COLUMNS where Table_Name='" +
                        //                i_TableName + "' and Table_SChema='" + SchemaName + "'" +
                        //                "and Column_Name in (" + @ExcelHeaderColumn + ") for xml path('')),1,1,'') AS ColumnList";

                        //            // MessageBox.Show(SQLQueryToGetMatchingColumn);
                        //             //MessageBox.Show(ExcelHeaderColumn);
                        //            string SQLColumnList = "";
                        //            SqlCommand cmd = myADONETConnection.CreateCommand();
                        //            cmd.CommandText = SQLQueryToGetMatchingColumn;
                        //            SQLColumnList = (string)cmd.ExecuteScalar();
                        //            // MessageBox.Show(" Matching Columns: " + SQLColumnList);

                        //            //Use Actual Matching Columns to get data from Excel Sheet
                        //            OleDbConnection cnn1 = new OleDbConnection(ConStr);
                        //            cnn1.Open();
                        //            // OleDbCommand oconn1 = new OleDbCommand("select " + SQLColumnList + ",'" + filename + "' AS FileName" + ",'" + sheetname + "' AS SheetName from [" + sheetname + "]", cnn1);
                        //            OleDbCommand oconn1 = new OleDbCommand("select " + SQLColumnList + " from [" + sheetname + "]", cnn1);

                        //            OleDbDataAdapter adp1 = new OleDbDataAdapter(oconn1);
                        //            DataTable dt1 = new DataTable();
                        //            adp1.Fill(dt1);
                        //            cnn1.Close();
                        //            //Load Data from DataTable to SQL Server Table.
                        //            using (SqlBulkCopy BC = new SqlBulkCopy(myADONETConnection))
                        //            {
                        //                BC.DestinationTableName = SchemaName + "." + i_TableName;
                        //                foreach (var column1 in dt1.Columns)
                        //                    BC.ColumnMappings.Add(column1.ToString(), column1.ToString());
                        //                BC.WriteToServer(dt1);
                        //            }
                        //            */
                        //        }
                                

                        //    }
                        //}

                    //}
            }
        }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D2E26C5B-DD64-473C-A146-C7D7014672D1}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_3af0e2b1ea9b4f1fb70ab4b5f0862837</RootNamespace>
    <AssemblyName>ST_3af0e2b1ea9b4f1fb70ab4b5f0862837</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_3af0e2b1ea9b4f1fb70ab4b5f0862837</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_3af0e2b1ea9b4f1fb70ab4b5f0862837</msb:DisplayName>
    <msb:ProjectId>{536E3BA6-455B-465D-B749-C8D03ADE8129}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="740fbd67392a42e3b779711d75b4e223">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>243</msb:LineNumber>
      <msb:ColumnNumber>37</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="bf09a0663fa44f739e6dc38aae0afa76">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>41</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>266</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="5c7d4f6b3da443358b0de69c1d240354">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>37</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>277</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="151bff2bd1e04504b33a6ec46738b759">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>153</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="a7aecb92fc784e919f0963ead74de54a">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>45</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>309</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3af0e2b1ea9b4f1fb70ab4b5f0862837")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3af0e2b1ea9b4f1fb70ab4b5f0862837")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_3af0e2b1ea9b4f1fb70ab4b5f0862837.dll">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
pAEGABopAAAAAIYY2AYGAAYAIikAAAAAkRjeBqkBBgAAAAEAMQQAAAIAigAAAAMAPgQAAAQANwIA
AAEA7wMJANgGAQARANgGBgAZANgGCgApANgGEAAxANgGEAA5ANgGEABBANgGEABJANgGEABRANgG
EABZANgGEABhANgGEABpANgGBgDZANgGBgD5ANgGFQAJAdgGBgB5ANgGBgBxADMIJgARAQwILAAZ
AecEMgARAU0FOQAhAe8FPQB5ALEAQgApAfQIRwCBANgGEAAxAYUBTQCBANAFVACBABwIWgBBAeID
YAAxAeQIaADBABoCBgARAbEHqgBRAecEsABZAdgDOQC5ACgEtwB5ANgGEABhAQgFBgBpAdgGuwCJ
ANgGBgBxAeIEwgBhARQCBgCJAFsIyACBAaAIaAB5AecEzgCZAOcE1ACJAdgGEACJAb8H2QApAWQI
4QApAWQI6ACRANgGEACZAaoH7gCRAOYA8wCZAOcE/QApAeQHAgGhANgGBwGpAdgGDgGJAO0HFAGx
AecEGgG5AVYBtwApAWQIIQExAbMIEAAxAU8GOQCpANgGVACpAD0BEACBAcoGKQGxAJQIOQCpAMgH
LgHBAYYANAGxAKoIPAGpALAGQAHJANoAtwBxANgGBgC5ANgGBgDRASsBRgHRAcsITwHhANgGVQEB
AdgGBgAIABQAbwEIABgAdAEpAHMA5AEuAAsAvAEuABMAxQEuABsA5AEuACMA7QEuACsAFgIuADMA
FgIuADsAFgIuAEMA7QEuAEsAHAIuAFMAFgIuAFsAMwJDAGMAdAFJAHMA5AFhAHsAdAFjAGsAdAEb
AGwAAwABAAQAAwAAAGEGrQEAAL0BsgEAAHYItwECAAUAAwACAAYABQABAAcABQACAAgABwAEgAAA
AQAAAHYcjkAAAAAAAAABAAAABAAAAAAAAAAAAAAAXQF9AAAAAAAOAAAAAAAAAAAAAABmAUoEAAAA
AAQAAAAAAAAAAAAAAF0BXwAAAAAABAAAAAAAAAAAAAAAXQHwBAAAAAAOAAAAAAAAAAAAAABmATgA
AAAAAAAAAAABAAAAKQcAAAUAAgAAAABTVF8zYWYwZTJiMWVhOWI0ZjFmYjcwYWI0YjVmMDg2Mjgz
NwA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVl
X18AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAQWRkAHBfZmlsZV9pZABP
bGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABkZWZh
dWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFy
aWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2V0
X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAc2V0X0NvbW1hbmRUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1
cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERh
dGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVk
aXRvckJyb3dzYWJsZVN0YXRlAHBfc3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0
cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRy
aWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25z
QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJp
YnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0
cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBBZGRXaXRoVmFs
dWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxCdWxrQ29weUNvbHVtbk1hcHBp
bmcAVG9TdHJpbmcAcF91cGRfc3RyaW5nAHBfZXJyb3JfbG9nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
U2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlw
dE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8zYWYwZTJiMWVhOWI0ZjFmYjcw
YWI0YjVmMDg2MjgzNy5kbGwARmlsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBP
cGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlD
b2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBTcWxQYXJhbWV0ZXJD
b2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9uAE9sZURiQ29ubmVjdGlv
bgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5D
b21tb24ARmlsZUluZm8AQ3VsdHVyZUluZm8ARGlyZWN0b3J5SW5mbwBFeGVjdXRlU2NhbGFyAGdl
dF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3FsUGFyYW1ldGVyAE9sZURiRGF0
YUFkYXB0ZXIAU3FsRGF0YUFkYXB0ZXIAV3JpdGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVt
ZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzNhZjBlMmIxZWE5YjRmMWZiNzBhYjRi
NWYwODYyODM3LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBT
VF8zYWYwZTJiMWVhOWI0ZjFmYjcwYWI0YjVmMDg2MjgzNy5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRf
VmFyaWFibGVzAEdldEZpbGVzAGdldF9Db2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBDb250YWlucwBn
ZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0
ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAHVwZGF0ZV9sb2dfc3RhdHVzAGdldF9S
b3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9D
dXJyZW50AGdldF9Db3VudABNb3ZlTmV4dABzZXRfQ29tbWFuZFRleHQARGF0YVJvdwBnZXRfQXNz
ZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AG9wX0VxdWFsaXR5AAAVRABCAF8AQwBv
AG4AbgBfAEsAVQAAC0UAcgByAG8AcgAAI3MAcABfAHUAcABkAGEAdABlAF8AZQByAHIAXwBsAG8A
ZwAAD0AAZABiAG4AYQBtAGUAAAVLAFUAABFAAGYAaQBsAGUAXwBpAGQAABdAAHMAdABhAHQAZQBf
AHQAZQB4AHQAABdAAGUAcgByAG8AcgBfAHQAZQB4AHQAAA1TAHQAYQB0AHUAcwAAH3MAcABfAHUA
cABkAGEAdABlAF8AcwB0AGEAdABlAAAlVQBzAGUAcgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABl
AHIAAAEAgLlEAGEAdABhACAAUwBvAHUAcgBjAGUAIAA9ACAATwBOAFUAUgBBAEwASQBLAEEATgBC
AEIANwAxAFwATQBTAFMAUQBMAFMARQBSAFYARQBSADAAMQA7ACAASQBuAGkAdABpAGEAbAAgAEMA
YQB0AGEAbABvAGcAIAA9ACAASwBVADsAIABJAG4AdABlAGcAcgBhAHQAZQBkACAAUwBlAGMAdQBy
AGkAdAB5ACAAPQAgAFQAcgB1AGUAAIGzcwBlAGwAZQBjAHQAIABpAC4ARgBpAGwAZQBOAGEAbQBl
ACwAaQAuAFMAaABlAGUAdABOAGEAbQBlACwAVABhAGIAbABlAE4AYQBtAGUALABpAC4AQwBvAGwA
dQBtAG4ATgBhAG0AZQAsAGkALgBGAGkAbABlAF8AVQBSAEwALABpAC4ARgBpAGwAZQBJAEQALABm
AC4AUwBjAGgAZQBtAGEATgBhAG0AZQAgAGYAcgBvAG0AIABkAGIAbwAuAEUAVABMAF8ARgBpAGwA
ZQBJAG4AZgBvAHIAbQBhAHQAaQBvAG4AIABpACAAagBvAGkAbgAgACAAZABiAG8ALgBFAFQATABf
AEYAaQBsAGUATQBhAHAAIABmACAAbwBuACAAaQAuAEYAaQBsAGUATgBhAG0AZQA9AGYALgBGAGkA
bABlAE4AYQBtAGUAIABhAG4AZAAgAGkALgBTAGgAZQBlAHQATgBhAG0AZQA9AGYALgBTAGgAZQBl
AHQATgBhAG0AZQAgAGEAbgBkACAAaQAuAEYAaQBsAGUAUwB0AGEAdAB1AHMAPQAnAE4AZQB3ACcA
IAABA1wAAANCAAADVwAAAzkAAAdZAEUAUwAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBz
AG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIA
YwBlAD0AAEs7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABj
AGUAbAAgADEAMgAuADAAOwBIAEQAUgA9AAAROwBJAE0ARQBYAD0AMAAiAAAVVABBAEIATABFAF8A
TgBBAE0ARQAAAyQAAC9UAFIAQQBDAEsASQBUAF8AWQBVAFIAVABMAEEAUgBfAEMAVAAuAHgAbABz
AHgAAClUAFIAQQBDAEsASQBUAF8AUwBJAEUATQBFAE4AUwAuAHgAbABzAHgAAClUAFIAQQBDAEsA
SQBUAF8AWQBVAFIAVABMAEEAUgAuAHgAbABzAHgAAB9UAFIAQQBDAEsASQBUAF8ASQBUAC4AeABs
AHMAeAAAAzgAAC1zAGUAbABlAGMAdAAgAHQAbwBwACAAMQAgACoAIAAgAGYAcgBvAG0AIABbAAAD
OgAAA10AAAVdACAAAAMnAAEFJwAsAAGAu3MAZQBsAGUAYwB0ACAAUwBUAFUARgBGACgAKABTAGUA
bABlAGMAdAAgACAAJwAsAFsAJwArAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQArACcAXQAnACAAZgBy
AG8AbQAgAEkATgBGAE8AUgBNAEEAVABJAE8ATgBfAFMAQwBIAEUATQBBAC4AQwBPAEwAVQBNAE4A
UwAgAHcAaABlAHIAZQAgAFQAYQBiAGwAZQBfAE4AYQBtAGUAPQAnAAEpJwAgAGEAbgBkACAAVABh
AGIAbABlAF8AUwBDAGgAZQBtAGEAPQAnAAErJwBhAG4AZAAgAEMAbwBsAHUAbQBuAF8ATgBhAG0A
ZQAgAGkAbgAgACgAAYCHKQAgAE8AUgBEAEUAUgAgAEIAWQAgAE8AUgBEAEkATgBBAEwAXwBQAE8A
UwBJAFQASQBPAE4AIABmAG8AcgAgAHgAbQBsACAAcABhAHQAaAAoACcAJwApACkALAAxACwAMQAs
ACcAJwApACAAQQBTACAAQwBvAGwAdQBtAG4ATABpAHMAdAABD3MAZQBsAGUAYwB0ACAAAA8gAGYA
cgBvAG0AIABbAAAjcwBwAF8AdAByAHUAbgBjAGEAdABlAF8AdABhAGIAbABlAAAVQAB0AGEAYgBs
AGUAbgBhAG0AZQAAAy4AAAdTAFQARwAAB0UAUgBSAACAjVUAbgBhAGIAbABlACAAdABvACAAYwBh
AHMAdAAgAG8AYgBqAGUAYwB0ACAAbwBmACAAdAB5AHAAZQAgACcAUwB5AHMAdABlAG0ALgBEAEIA
TgB1AGwAbAAnACAAdABvACAAdAB5AHAAZQAgACcAUwB5AHMAdABlAG0ALgBTAHQAcgBpAG4AZwAn
AC4AAQMgAAAzdABhAGIAbABvAHMAdQBuAHUAIABrAG8AbgB0AHIAbwBsACAAZQBkAGkAbgBpAHoA
LgAAcVMAVABfADMAYQBmADAAZQAyAGIAMQBlAGEAOQBiADQAZgAxAGYAYgA3ADAAYQBiADQAYgA1
AGYAMAA4ADYAMgA4ADMANwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAPcWBNXRPE0+zuzZaJZXVggAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQEReQoHBBI9EkESQRJB
BSAAEoCJBSAAEoCNBiABEoCRHAMgABwEIAEcHAQgABJBBQACAg4OBiABARGAnQUgAQESPQUgABKA
oQcgAhKApQ4cAyAACD0HKw4ODg4ODg4OCBI9Ej0SRQgIDg4ODg4OEkkSRQ4ICBJNElESRQ4ODhJB
EkkSURJFCBJBElUSWRwSYQ4OBSAAEoCpBiABEoCtHAMgAA4GIAIBDhI9BSABCBJFBSAAEoC9BSAB
Ek0IBCABHAgHIAEdEoDJDgYAAw4ODg4FAAEOHQ4EBhGA0QkgAhJFEYDRHRwEIAEcDgQgAQIOBiAC
AQ4SSQUgAQESUQUgABKA2QYgARKA3QgHAAQODg4ODgQgABJZBSAAEoDhByACEoDlDg4DIAACBSAB
ARJFCAABEoDpEYDtBSAAEoDxByACAQ4SgPEIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYS
cQMGEnUDBhIQAgYIAwYRFAcgBAEODg4OBAAAEnEEAAASdQUAAQESdQQAABIQAwAAAQQIABJxBAgA
EnUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAo
AQAjU1RfM2FmMGUyYjFlYTliNGYxZmI3MGFiNGI1ZjA4NjI4MzcAAAUBAAAAABYBABFDb3B5cmln
aHQgQCAgMjAxOQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5S
ZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1
cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3Vy
Y2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAaEQAAAAAAAAAAAAA
gkQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHREAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNj
b3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAa
BAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAjkB2HAAAAQCOQHYcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
egMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAw
AAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0A
ZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAz
AGEAZgAwAGUAMgBiADEAZQBhADkAYgA0AGYAMQBmAGIANwAwAGEAYgA0AGIANQBmADAAOAA2ADIA
OAAzADcAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAyADgANgAu
ADEANgA1ADIANgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAzAGEA
ZgAwAGUAMgBiADEAZQBhADkAYgA0AGYAMQBmAGIANwAwAGEAYgA0AGIANQBmADAAOAA2ADIAOAAz
ADcALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkA
cgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBh
AHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMA
VABfADMAYQBmADAAZQAyAGIAMQBlAGEAOQBiADQAZgAxAGYAYgA3ADAAYQBiADQAYgA1AGYAMAA4
ADYAMgA4ADMANwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQA
XwAzAGEAZgAwAGUAMgBiADEAZQBhADkAYgA0AGYAMQBmAGIANwAwAGEAYgA0AGIANQBmADAAOAA2
ADIAOAAzADcAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcA
MgA4ADYALgAxADYANQAyADYAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADcAMgA4ADYALgAxADYANQAyADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAlDQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="243"
            Column="37" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="153"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="277"
            Column="37" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="266"
            Column="41" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="309"
            Column="45" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\GET_FILE_NAME"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{FFA03253-8AED-4DE0-9A31-4B55E05BC099}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GET_FILE_NAME"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_de12fb9e5e3a42039570b41a96a1ed4b"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SchemaName,User::SourceFolder,User::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Settings.get_Default():ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Sett" +
    "ings")]

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;

#endregion

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 
        private void update_log_status(string p_upd_string, string p_file_id, string p_error_log, string p_state)
        {

            SqlConnection myLogConnection = new SqlConnection();
            myLogConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            SqlCommand cmd = myLogConnection.CreateCommand();
            if (p_upd_string == "Error")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_err_log"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }
            if (p_upd_string == "Status")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_state"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }

        }


        public void Main()
		{
            // TODO: Add your code here
            string FolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
            string TableName = Dts.Variables["User::TableName"].Value.ToString();
            string SchemaName = Dts.Variables["User::SchemaName"].Value.ToString();
            string StartingColumn = "A";
            //Provide the end column till which you want to read
            string EndingColumn = "W";
            //Provide the row number from which you like to start reading
            string StartReadingFromRow = "9";
            
            var directory = new DirectoryInfo(FolderPath);
            FileInfo[] files = directory.GetFiles();

            //Declare and initilize variables
            string fileFullPath = "";
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);

            //Get one Book(Excel file at a time)
            foreach (FileInfo file in files)
            {
                fileFullPath = FolderPath + "\\" + file.Name;
                string fileurl = file.Name;
                string filename = "";
                string donem = "";

                    donem = file.Name.Substring(0, 8);
                    filename = file.Name.Substring(9);

                string a = "";
                if (donem.Substring(0,1)!=".")
                { 

                //Create Excel Connection
                string ConStr;
                string HDR;
                HDR = "YES";
                ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=0\"";
                OleDbConnection cnn = new OleDbConnection(ConStr);

                //Get Sheet Name
                cnn.Open();
                DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                string sheetname;
                sheetname = "";
                    //Only read data from provided SheetNumber

                    foreach (DataRow drSheet in dtSheet.Rows)
                    {
                        // char last_character = StrNo[StrNo.Length - 1];


                        if (drSheet["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = drSheet["TABLE_NAME"].ToString();
                            // MessageBox.Show(sheetname);
                            string last_char = sheetname.Substring(sheetname.Length - 1, 1);
                            string last_2char = sheetname.Substring(sheetname.Length - 2, 2);
                            if (last_char == "$" || last_2char == "$'")
                            {
                                OleDbCommand oconn;
                                //Load the DataTable with Sheet Data so we can get the column header
                                if (filename == "TRACKIT_YURTLAR_CT.xlsx" || filename == "TRACKIT_SIEMENS.xlsx" || filename == "TRACKIT_YURTLAR.xlsx" || filename == "TRACKIT_IT.xlsx" )
                                {  if(filename == "TRACKIT_YURTLAR.xlsx")
                                    { StartReadingFromRow = "8"; }
                                    else { StartReadingFromRow = "9"; }
                                    //oconn = new OleDbCommand("select top 10 *  from [" + sheetname + "] ", cnn);
                                    oconn = new OleDbCommand("select top 1 *  from [" + sheetname + StartingColumn + StartReadingFromRow + ":" + EndingColumn + "]", cnn);
                                }
                                else
                                {
                                     oconn = new OleDbCommand("select top 1  *  from [" + sheetname + "] ", cnn);
                                }
                                OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                                DataTable dt = new DataTable();
                                adp.Fill(dt);
                                cnn.Close();
                            /*    
                               DataRow drTable1 = dt.Rows[5];
                               string a_FileName = drTable1[5].ToString();
                                string a_SheetName = drTable1[1].ToString();
                                string a_Sheet1 = drTable1[2].ToString();

                                drTable1 = dt.Rows[6];
                                string a_FileName1 = drTable1[5].ToString();
                                string a_SheetName1 = drTable1[1].ToString();
                                string a_Sheet2 = drTable1[2].ToString();

                                drTable1 = dt.Rows[7];
                                string a_FileName2 = drTable1[5].ToString();
                                string a_SheetName2 = drTable1[1].ToString();
                                string a_Sheet3 = drTable1[2].ToString();
                                string aas= dt.Rows[7].ItemArray[5].ToString();

                                drTable1 = dt.Rows[8];
                                string a_FileName3 = drTable1[5].ToString();
                                string  a_SheetName3 = drTable1[1].ToString();
                                string a_Sheet4 = drTable1[2].ToString();
                                */
                                //Prepare Header columns list so we can run against Database to get matching columns for a table.
                           
                                string ExcelHeaderColumn = "";
                              //  if (filename != "YURTLAR_CT.xlsx")
                               // {
                                    for (int i = 0; i < dt.Columns.Count; i++)
                            {
                                if (i != dt.Columns.Count - 1)
                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                else
                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                            }
                               // }else
                                /*{ 
                               
                                for (int i = 0; i < dt.Columns.Count; i++)
                                {
                                    if (i != dt.Columns.Count - 1)
                                            ExcelHeaderColumn += "'" + dt.Rows[7].ItemArray[i] + "'" + ",";
                                    else
                                            ExcelHeaderColumn += "'" + dt.Rows[7].ItemArray[i] + "'";
                                }
                                }*/
                                //MessageBox.Show(ExcelHeaderColumn);


                                string s_insert_log = "INSERT into dbo.ETL_FileInformation (FileName,SheetName,FileStatus,ColumnName,Donem,File_URL) VALUES (@p_filename,@p_SheetName,@p_Status,@p_Column,@p_donem,@p_fileurl)";

                            try
                            {
                                using (SqlCommand query_s_insert_log = new SqlCommand(s_insert_log))
                                {
                                    query_s_insert_log.Connection = myADONETConnection;
                                    query_s_insert_log.Parameters.Add("@p_filename", SqlDbType.NVarChar, 255).Value = filename;
                                    query_s_insert_log.Parameters.Add("@p_SheetName", SqlDbType.NVarChar, 255).Value = sheetname;
                                    query_s_insert_log.Parameters.Add("@p_Status", SqlDbType.VarChar, 30).Value = "New";
                                    query_s_insert_log.Parameters.Add("@p_column", SqlDbType.NVarChar, 4000).Value = ExcelHeaderColumn;
                                    query_s_insert_log.Parameters.Add("@p_donem", SqlDbType.NVarChar, 255).Value = donem;
                                    query_s_insert_log.Parameters.Add("@p_fileurl", SqlDbType.NVarChar, 255).Value = fileurl;

                                    //myADONETConnection.Open();
                                    query_s_insert_log.ExecuteNonQuery();
                                    // update_log_status("Status", i_fileID, "", "STG");
                                }
                            }
                            catch (Exception ex)
                            {
                                string hata = ex.Message.ToString();
                                //  update_log_status("Error", i_fileID, hata, "ERR");
                            }


                        }
                    }
                            
                }
               }

            }
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_de12fb9e5e3a42039570b41a96a1ed4b.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{349737DE-6314-4ECE-A717-26E1D128DCD1}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_de12fb9e5e3a42039570b41a96a1ed4b</RootNamespace>
    <AssemblyName>ST_de12fb9e5e3a42039570b41a96a1ed4b</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_de12fb9e5e3a42039570b41a96a1ed4b</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_de12fb9e5e3a42039570b41a96a1ed4b</msb:DisplayName>
    <msb:ProjectId>{B72D2CA0-88D2-42BD-AC5F-CEA3F2A5AB90}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_de12fb9e5e3a42039570b41a96a1ed4b.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="042c74b7ddef4a3d94de26fa251feaea">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>198</msb:LineNumber>
      <msb:ColumnNumber>29</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="65986b1b982647aba48c781222f22c62">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>143</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_de12fb9e5e3a42039570b41a96a1ed4b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_de12fb9e5e3a42039570b41a96a1ed4b")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_de12fb9e5e3a42039570b41a96a1ed4b.dll">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
EgAcAqQEEgCFAqQEEgD2ASMFBgA5AsUGCgCSBGkEFgDKB1UBFgBPBlUBBgAVBPAEDgCnAPYFDgCD
ATsADgCEBUcIDgBtBkcIFgCCB1UBFgAEAVUBBgAtBgoABgAeBgoADgC/BfYFDgCUAGsABgCfAPAE
DgCbBTsADgDbATsADgB6BmsADgB9BvYFDgBvBTsADgAYBTsADgB1ATsADgBhBvYFBgCKAfAEBgAZ
AfAEBgCICF0FAAAAAAEAAAAAAAEAAQABABAADQVHADkAAQABAAAAEADsBkgHbQABAAQAAAEQAJUH
SAeBAAMACAADAQAA9QcAAGUABAALABEA/ARVAREArwFZAREAygBdAQYGMwBhAVaA5QdkAVaAjwFk
AVAgAAAAAIEAAwhoAQEA1CEAAAAAhgATBQYABQDIJgAAAACGGKUGBgAFANAmAAAAAIMYpQYGAAUA
2CYAAAAAkwg7BnABBQAEJwAAAACTCJcBdQEFAAsnAAAAAJMIowF6AQUAEycAAAAAlggsCIABBgAa
JwAAAACGGKUGBgAGACInAAAAAJEYqwaFAQYAAAABABwEAAACAIoAAAADADMEAAAEADECAAABAPMD
CQClBgEAEQClBgYAGQClBgoAKQClBhAAMQClBhAAOQClBhAAQQClBhAASQClBhAAUQClBhAAWQCl
BhAAYQClBhAAaQClBgYA0QClBgYA+QClBhUACQGlBgYAeQClBgYAcQDtByYAEQHGBywAGQHnBDIA
EQFNBTkAIQHMBT0AeQCxAEIAKQGhCEcAgQClBhAAMQF/AU0AgQCtBVQAgQDWB1oAQQHmA2AAMQGR
CGgAuQAUAgYAEQF+B5MAUQHnBJkAWQHSAzkA2QATBKAAYQGlBhAAYQGMB6QAaQE9AaAAKQEeCKoA
KQEpBLEAKQEpBLcAKQGtCEcAKQEeCLwAkQClBhAAcQEIBQYAeQF3B8IAkQDmAMcAsQAVCNEAkQGX
BtcAmQBdCDkAoQDnBNwAKQGeB+EAKQE/BGgAqQClBuYAmQGlBu0AsQClBgYAoQHiBPMAcQEOAgYA
sQCnB/kAkQFpCGgAqQHnBP8AsQFGAaAAKQEeCAYBQQGGAA4BwQHcAxkBwQDaAKAAmQBzCB4BEQE4
CAEAcQClBgYA2QClBgYAyQErASIByQGECCsB4QClBjEBAQGlBgYACAAUAEsBCAAYAFABKQBzAMAB
LgALAJgBLgATAKEBLgAbAMABLgAjAMkBLgArAPIBLgAzAPIBLgA7APIBLgBDAMkBLgBLAPgBLgBT
APIBLgBbAA8CQwBjAFABSQBzAMABYQB7AFABYwBrAFABGwBsAAMAAQAEAAMAAAA/BokBAAC3AY4B
AAAwCJMBAgAFAAMAAgAGAAUAAQAHAAUAAgAIAAcABIAAAAEAAAB1HDhwAAAAAAAARwAAAAQAAAAA
AAAAAAAAADkBfQAAAAAADgAAAAAAAAAAAAAAQgFKBAAAAAAEAAAAAAAAAAAAAAA5ATsAAAAAAAQA
AAAAAAAAAAAAADkB8AQAAAAADgAAAAAAAAAAAAAAQgEUAAAAAAAAAAAAAQAAAPYGAAAFAAIAAAAA
PE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9f
AFN5c3RlbS5EYXRhAFNUX2RlMTJmYjllNWUzYTQyMDM5NTcwYjQxYTk2YTFlZDRiAFN5c3RlbS5E
YXRhLk9sZURiAG1zY29ybGliAEFkZABwX2ZpbGVfaWQAT2xlRGJTY2hlbWFHdWlkAE9sZURiQ29t
bWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdl
AEdldE9sZURiU2NoZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9OYW1lAGdldF9Db2x1bW5OYW1lAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAU3FsRGJUeXBlAHNldF9Db21tYW5kVHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBwX3N0YXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRy
aWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVu
dGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHBfdXBkX3N0cmluZwBTdWJzdHJpbmcAcF9lcnJvcl9s
b2cAZ2V0X0xlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29t
cG9uZW50TW9kZWwAU1RfZGUxMmZiOWU1ZTNhNDIwMzk1NzBiNDFhOTZhMWVkNGIuZGxsAEZpbGwA
Z2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1
bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0
aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAFNxbFBhcmFtZXRlckNv
bGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24Ac2V0X0Nvbm5lY3Rpb24AT2xlRGJDb25uZWN0aW9u
AEFjcXVpcmVDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNv
bW1vbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5mbwBEaXJlY3RvcnlJbmZvAGdl
dF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIARGJQYXJhbWV0ZXIAU3FsUGFyYW1l
dGVyAE9sZURiRGF0YUFkYXB0ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0
b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTVF9kZTEyZmI5ZTVlM2E0MjAzOTU3MGI0MWE5NmExZWQ0Yi5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfZGUxMmZiOWU1ZTNhNDIw
Mzk1NzBiNDFhOTZhMWVkNGIuUHJvcGVydGllcwBUYWJsZXMAZ2V0X1ZhcmlhYmxlcwBHZXRGaWxl
cwBTZXR0aW5ncwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nv
bm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAHVw
ZGF0ZV9sb2dfc3RhdHVzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rh
c2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AGdldF9Db3VudABNb3Zl
TmV4dABEYXRhUm93AGdldF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVlcnkAb3BfRXF1YWxpdHkAb3Bf
SW5lcXVhbGl0eQAAABVEAEIAXwBDAG8AbgBuAF8ASwBVAAALRQByAHIAbwByAAAjcwBwAF8AdQBw
AGQAYQB0AGUAXwBlAHIAcgBfAGwAbwBnAAAPQABkAGIAbgBhAG0AZQAABUsAVQAAEUAAZgBpAGwA
ZQBfAGkAZAAAF0AAcwB0AGEAdABlAF8AdABlAHgAdAAAF0AAZQByAHIAbwByAF8AdABlAHgAdAAA
DVMAdABhAHQAdQBzAAAfcwBwAF8AdQBwAGQAYQB0AGUAXwBzAHQAYQB0AGUAACVVAHMAZQByADoA
OgBTAG8AdQByAGMAZQBGAG8AbABkAGUAcgAAH1UAcwBlAHIAOgA6AFQAYQBiAGwAZQBOAGEAbQBl
AAAhVQBzAGUAcgA6ADoAUwBjAGgAZQBtAGEATgBhAG0AZQAAA0EAAANXAAADOQAAAQADXAAAAy4A
AAdZAEUAUwAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBP
AEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAEs7AEUAeAB0AGUA
bgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAOwBI
AEQAUgA9AAAROwBJAE0ARQBYAD0AMAAiAAAVVABBAEIATABFAF8ATgBBAE0ARQAAAyQAAAUkACcA
AS9UAFIAQQBDAEsASQBUAF8AWQBVAFIAVABMAEEAUgBfAEMAVAAuAHgAbABzAHgAAClUAFIAQQBD
AEsASQBUAF8AUwBJAEUATQBFAE4AUwAuAHgAbABzAHgAAClUAFIAQQBDAEsASQBUAF8AWQBVAFIA
VABMAEEAUgAuAHgAbABzAHgAAB9UAFIAQQBDAEsASQBUAF8ASQBUAC4AeABsAHMAeAAAAzgAAC1z
AGUAbABlAGMAdAAgAHQAbwBwACAAMQAgACoAIAAgAGYAcgBvAG0AIABbAAADOgAAA10AAC9zAGUA
bABlAGMAdAAgAHQAbwBwACAAMQAgACAAKgAgACAAZgByAG8AbQAgAFsAAAVdACAAAAMnAAEFJwAs
AAGBT0kATgBTAEUAUgBUACAAaQBuAHQAbwAgAGQAYgBvAC4ARQBUAEwAXwBGAGkAbABlAEkAbgBm
AG8AcgBtAGEAdABpAG8AbgAgACgARgBpAGwAZQBOAGEAbQBlACwAUwBoAGUAZQB0AE4AYQBtAGUA
LABGAGkAbABlAFMAdABhAHQAdQBzACwAQwBvAGwAdQBtAG4ATgBhAG0AZQAsAEQAbwBuAGUAbQAs
AEYAaQBsAGUAXwBVAFIATAApACAAVgBBAEwAVQBFAFMAIAAoAEAAcABfAGYAaQBsAGUAbgBhAG0A
ZQAsAEAAcABfAFMAaABlAGUAdABOAGEAbQBlACwAQABwAF8AUwB0AGEAdAB1AHMALABAAHAAXwBD
AG8AbAB1AG0AbgAsAEAAcABfAGQAbwBuAGUAbQAsAEAAcABfAGYAaQBsAGUAdQByAGwAKQAAF0AA
cABfAGYAaQBsAGUAbgBhAG0AZQAAGUAAcABfAFMAaABlAGUAdABOAGEAbQBlAAATQABwAF8AUwB0
AGEAdAB1AHMAAAdOAGUAdwAAE0AAcABfAGMAbwBsAHUAbQBuAAARQABwAF8AZABvAG4AZQBtAAAV
QABwAF8AZgBpAGwAZQB1AHIAbAAAcVMAVABfAGQAZQAxADIAZgBiADkAZQA1AGUAMwBhADQAMgAw
ADMAOQA1ADcAMABiADQAMQBhADkANgBhADEAZQBkADQAYgAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAAA2qKx4tWRtSrRKusfTtsidAAQgAQEIAyAAAQUgAQEREQQg
AQEOBSABARF5CgcEEj0SQRJBEkEFIAASgIkFIAASgI0GIAESgJEcAyAAHAQgARwcBCAAEkEFAAIC
Dg4GIAEBEYCdBSABARI9BSAAEoChByACEoClDhwDIAAIJgcZDg4ODg4SPR0SRQgSRQ4ODg4SSQ4S
TRJRDhJVElkODggSQRJdBSAAEoCpBiABEoCtHAMgAA4FIAAdEkUGAAMODg4OBSACDggIBCABDggF
AAEOHQ4EBhGAwQkgAhJZEYDBHRwFIAASgMUEIAASTQQgARwOBCABAg4GIAIBDhJJBSABARJVBSAB
CBJZBSAAEoDVBiABEoDZCAcABA4ODg4OCiADEoClDhGA3QgEIAEBHAMgAAIIAAESgOURgOkFIAAS
gO0HIAIBDhKA7Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJxAwYSdQMGEhACBggDBhEU
ByAEAQ4ODg4EAAAScQQAABJ1BQABARJ1BAAAEhADAAABBAgAEnEECAASdQQIABIQCAEACAAAAAAA
HgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9kZTEyZmI5ZTVl
M2E0MjAzOTU3MGI0MWE5NmExZWQ0YgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE5AABJAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQg
RnJhbWV3b3JrIDQuNQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAAPwAAAAAAAAAAAAAaPwAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAADD8AAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAOHB1HAAAAQA4cHUcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBkAGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAzADkANQA3ADAAYgA0ADEAYQA5ADYAYQAx
AGUAZAA0AGIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAyADgA
NQAuADIAOAA3ADIAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBk
AGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAzADkANQA3ADAAYgA0ADEAYQA5ADYAYQAxAGUA
ZAA0AGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfAGQAZQAxADIAZgBiADkAZQA1AGUAMwBhADQAMgAwADMAOQA1ADcAMABiADQAMQBhADkA
NgBhADEAZQBkADQAYgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwBkAGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAzADkANQA3ADAAYgA0ADEAYQA5ADYA
YQAxAGUAZAA0AGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcAMgA4ADUALgAyADgANwAyADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAMgA4ADUALgAyADgANwAyADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAALD8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="198"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="143"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\GET_FILE_NAME 1"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{43c241d2-dba5-42fa-bd12-27126e2f0b05}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GET_FILE_NAME 1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_b1191be9905f4c61ba611e5cdf927af7"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SchemaName,User::SourceFolder,User::TableName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;

#endregion

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 
        private void update_log_status(string p_upd_string, string p_file_id, string p_error_log, string p_state)
        {

            SqlConnection myLogConnection = new SqlConnection();
            myLogConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            SqlCommand cmd = myLogConnection.CreateCommand();
            if (p_upd_string == "Error")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_err_log"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }
            if (p_upd_string == "Status")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_state"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }

        }


        public void Main()
		{

            int count_sqlDA,k;
            string p_fileName, p_sheetName, p_ColumnName, p_StartingColumn, p_EndingColumn, p_StartReadingFromRow, p_SourceFolder;
            string str_exception;
            string fileurl = "";
            string filename = "";
            string donem = "";
            string ConStr;
            string HDR;
            string sheetname;
            string ExcelHeaderColumn = "";


            //Declare and initilize variables
            string fileFullPath = "";
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            using (SqlConnection sqlcon = myADONETConnection)
            {
                try { 
                sqlcon.Open();
                } catch(Exception ex)
                {
                     str_exception = ex.Message.ToString();
                    //Generic  lo g tablosunu update et
                    //  update_log_status("Error", i_fileID, hata, "ERR");
                }
                SqlDataAdapter sqlDA = new SqlDataAdapter("SELECT [FileName],[SheetName] ,[ColumnName],[StartingColumn] ,[EndingColumn] ,[StartReadingFromRow]  ,[SourceFolder]FROM[dbo].[ETL_FileMap]", sqlcon);
                DataTable dta = new DataTable();
                sqlDA.Fill(dta);
                sqlcon.Close();
                count_sqlDA = dta.Rows.Count;
                for (int y = 0; y < count_sqlDA; y++)
                {
                   // k = k + 1;
                    DataRow drTable = dta.Rows[y];
                    /// string columnvalue = drTable["TABLE_NAME"].ToString();
                    // foreach (DataColumn column in dta.Columns)
                    //{
                    p_fileName = drTable[0].ToString();
                    p_sheetName = drTable[1].ToString();
                    p_ColumnName = drTable[2].ToString();
                    p_StartingColumn = drTable[3].ToString();
                    p_EndingColumn = drTable[4].ToString();
                    p_StartReadingFromRow = drTable[5].ToString();
                    p_SourceFolder = drTable[6].ToString();
                    var directory = new DirectoryInfo(p_SourceFolder);
                    FileInfo[] files = directory.GetFiles("*"+ p_fileName + "*");
                    foreach (FileInfo file in files)
                    {
                        fileFullPath = p_SourceFolder + "\\" + file.Name;
                        fileurl = file.Name;
                        donem = file.Name.Substring(0, 8);
                        filename = file.Name.Substring(9);
                        if(filename== p_fileName)
                        {
                            HDR = "YES";
                            ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=0\"";
                            OleDbConnection cnn = new OleDbConnection(ConStr);

                            //Get Sheet Name
                            try {
                            cnn.Open();
                            } catch(Exception ex)
                            {
                                str_exception = ex.Message.ToString();
                                //File AÇılamadı uyarısı ver
                            }
                            DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                            //Only read data from provided SheetNumber
                            foreach (DataRow drSheet in dtSheet.Rows)
                            {
                                if (drSheet["TABLE_NAME"].ToString()== p_sheetName)
                                {
                                    OleDbCommand oconn;
                                    //Load the DataTable with Sheet Data so we can get the column header
                                    if (p_StartingColumn!="0")
                                    {
                                        //oconn = new OleDbCommand("select top 10 *  from [" + sheetname + "] ", cnn);
                                        oconn = new OleDbCommand("select top 1 *  from [" + p_sheetName + p_StartingColumn + p_StartReadingFromRow + ":" + p_EndingColumn + "]", cnn);
                                    }
                                    else
                                    {
                                        oconn = new OleDbCommand("select top 1  *  from [" + p_sheetName + "] ", cnn);
                                    }
                                    OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                                    DataTable dt = new DataTable();
                                    try { 
                                    adp.Fill(dt);
                                    }catch(Exception ex)
                                    { str_exception = ex.Message.ToString(); 
                                        //exxel header okunamadı
                                    }
                                    cnn.Close();

                                    // Header'lar seri olarak alınır
                                    ExcelHeaderColumn = "";
                                    for (int i = 0; i < dt.Columns.Count; i++)
                                    {
                                        if (i != dt.Columns.Count - 1)
                                            ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                        else
                                            ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                                    }
                                    string s_insert_log = "INSERT into dbo.ETL_FileInformation (FileName,SheetName,FileStatus,ColumnName,Donem,File_URL) VALUES (@p_filename,@p_SheetName,@p_Status,@p_Column,@p_donem,@p_fileurl)";
                                    try
                                    {
                                        using (SqlCommand query_s_insert_log = new SqlCommand(s_insert_log))
                                        {
                                            query_s_insert_log.Connection = myADONETConnection;
                                            query_s_insert_log.Parameters.Add("@p_filename", SqlDbType.NVarChar, 255).Value = filename;
                                            query_s_insert_log.Parameters.Add("@p_SheetName", SqlDbType.NVarChar, 255).Value = p_sheetName;
                                            query_s_insert_log.Parameters.Add("@p_Status", SqlDbType.VarChar, 30).Value = "New";
                                            query_s_insert_log.Parameters.Add("@p_column", SqlDbType.NVarChar, 4000).Value = ExcelHeaderColumn;
                                            query_s_insert_log.Parameters.Add("@p_donem", SqlDbType.NVarChar, 255).Value = donem;
                                            query_s_insert_log.Parameters.Add("@p_fileurl", SqlDbType.NVarChar, 255).Value = fileurl;

                                            //myADONETConnection.Open();
                                            query_s_insert_log.ExecuteNonQuery();
                                            // update_log_status("Status", i_fileID, "", "STG");
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        string hata = ex.Message.ToString();
                                        //  update_log_status("Error", i_fileID, hata, "ERR");
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}



     

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_b1191be9905f4c61ba611e5cdf927af7.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{349737DE-6314-4ECE-A717-26E1D128DCD1}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_de12fb9e5e3a42039570b41a96a1ed4b</RootNamespace>
    <AssemblyName>ST_b1191be9905f4c61ba611e5cdf927af7</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_b1191be9905f4c61ba611e5cdf927af7</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_b1191be9905f4c61ba611e5cdf927af7</msb:DisplayName>
    <msb:ProjectId>{C8C411B6-0532-4564-9A1C-F55FF47F6EE1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_b1191be9905f4c61ba611e5cdf927af7.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="e6b92725112b4874b8f38b4da312ef0d">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>181</msb:LineNumber>
      <msb:ColumnNumber>21</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Settings.get_Default():ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Sett" +
    "ings")]

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_de12fb9e5e3a42039570b41a96a1ed4b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_de12fb9e5e3a42039570b41a96a1ed4b")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_de12fb9e5e3a42039570b41a96a1ed4b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_b1191be9905f4c61ba611e5cdf927af7.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMip+F0AAAAAAAAAAOAAIiALATAAACAAAAAIAAAAAAAAaj8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABg/AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAcB8AAAAgAAAAIAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAiAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAKAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABM
PwAAAAAAAEgAAAACAAUAgCcAAOAWAAABAAAAAAAAAGA+AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswAwBZAQAAAQAAEXMQAAAKCgIoEQAACm8SAAAKcgEAAHBv
EwAACgIoEQAACm8UAAAKbxUAAAp1DwAAAQoGbxYAAAoLA3IXAABwKBcAAAo5gAAAAHIjAABwcxgA
AAoMBxpvGQAACggGbxoAAAoIGm8ZAAAKCG8bAAAKckcAAHByVwAAcG8cAAAKJghvGwAACnJdAABw
BG8cAAAKJghvGwAACnJvAABwDgRvHAAACiYIbxsAAApyhwAAcAVvHAAACiYIbx0AAAom3goILAYI
bx4AAArcA3KfAABwKBcAAAo5gAAAAHKtAABwcxgAAAoNBxpvGQAACgkGbxoAAAoJGm8ZAAAKCW8b
AAAKckcAAHByVwAAcG8cAAAKJglvGwAACnJdAABwBG8cAAAKJglvGwAACnJvAABwDgRvHAAACiYJ
bxsAAApyhwAAcAVvHAAACiYJbx0AAAom3goJLAYJbx4AAArcKgAAAAEcAAACAFMAa74ACgAAAAAC
AOMAa04BCgAAAAAbMAQAiwQAAAIAABFyzQAAcBMHcs0AAHATCHLNAABwEwlyzQAAcBMLcs0AAHAT
DHMQAAAKEw0CKBEAAApvEgAACnIBAABwbxMAAAoCKBEAAApvFAAACm8VAAAKdQ8AAAETDRENEw4R
Dm8fAAAK3g1vIAAACm8hAAAKJt4Acs8AAHARDnMiAAAKcyMAAAoTDxEPbyQAAAomEQ5vJQAAChEP
byYAAApvJwAACgoWExA4wQMAABEPbyYAAAoREG8oAAAKJRZvKQAACm8hAAAKCyUXbykAAApvIQAA
CgwlGG8pAAAKbyEAAAomJRlvKQAACm8hAAAKDSUabykAAApvIQAAChMEJRtvKQAACm8hAAAKEwUc
bykAAApvIQAAChMGEQZzKgAACnLoAQBwB3LoAQBwKCsAAApvLAAAChMRFhMSOB8DAAARERESmhMT
EQZy7AEAcBETby0AAAooKwAAChMMERNvLQAAChMHERNvLQAAChYeby4AAAoTCRETby0AAAofCW8v
AAAKEwgRCAcoFwAACjnHAgAAcvABAHATChuNJQAAASUWcvgBAHCiJRcRDKIlGHJWAgBwoiUZEQqi
JRpyogIAcKIoMAAACnMxAAAKExQRFG8fAAAK3g1vIAAACm8hAAAKJt4AERR+MgAAChRvMwAACm8m
AAAKbzQAAAoTFTg1AgAAERVvNQAACnQvAAABcrQCAHBvNgAACm8hAAAKCCgXAAAKOQ8CAAAJcsoC
AHAoNwAACixAHY0lAAABJRZyzgIAcKIlFwiiJRgJoiUZEQWiJRpy/AIAcKIlGxEEoiUccgADAHCi
KDAAAAoRFHM4AAAKExYrGXIEAwBwCHI0AwBwKCsAAAoRFHM4AAAKExYRFnM5AAAKExdzIwAAChMY
ERcRGG8kAAAKJt4NbyAAAApvIQAACibeABEUbyUAAApyzQAAcBMLFhMaK2YRGhEYbzoAAApvJwAA
ChdZLigRC3I6AwBwERhvOgAAChEabzsAAApvPAAACnI+AwBwKD0AAAoTCysmEQtyOgMAcBEYbzoA
AAoRGm87AAAKbzwAAApyOgMAcCg9AAAKEwsRGhdYExoRGhEYbzoAAApvJwAACjKKckQDAHATGREZ
cxgAAAoTGxEbEQ1vGgAAChEbbxsAAApylQQAcB8MIP8AAABvPgAAChEIbz8AAAoRG28bAAAKcq0E
AHAfDCD/AAAAbz4AAAoIbz8AAAoRG28bAAAKcscEAHAfFh8ebz4AAApy2wQAcG8/AAAKERtvGwAA
CnLjBABwHwwgoA8AAG8+AAAKEQtvPwAAChEbbxsAAApy9wQAcB8MIP8AAABvPgAAChEJbz8AAAoR
G28bAAAKcgkFAHAfDCD/AAAAbz4AAAoRB28/AAAKERtvHQAACibeDBEbLAcRG28eAAAK3N4NbyAA
AApvIQAACibeABEVb0AAAAo6v/3//94VERV1FwAAARMcERwsBxEcbx4AAArcERIXWBMSERIREY5p
P9b8//8REBdYExAREAY/N/z//94MEQ4sBxEObx4AAArcAigRAAAKFm9BAAAKKgBBrAAAAAAAAFoA
AAAJAAAAYwAAAA0AAAAYAAABAAAAAMUBAAAJAAAAzgEAAA0AAAAYAAABAAAAAJUCAAAMAAAAoQIA
AA0AAAAYAAABAgAAAEcDAADMAAAAEwQAAAwAAAAAAAAAAAAAAD4DAADjAAAAIQQAAA0AAAAYAAAB
AgAAAPQBAABIAgAAPAQAABUAAAAAAAAAAgAAAFoAAAAYBAAAcgQAAAwAAAAAAAAAHgIoQgAACioe
AihDAAAKKq5+AQAABC0ech8FAHDQAwAAAihEAAAKb0UAAApzRgAACoABAAAEfgEAAAQqGn4CAAAE
Kh4CgAIAAAQqGn4DAAAEKh4CKEcAAAoqLnMJAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQu
MC4zMDMxOQAAAAAFAGwAAACwBQAAI34AABwGAAC8CAAAI1N0cmluZ3MAAAAA2A4AAJQFAAAjVVMA
bBQAABAAAAAjR1VJRAAAAHwUAABkAgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAAB
AAAAOgAAAAUAAAAGAAAACgAAAAUAAABHAAAAAgAAABAAAAACAAAAAgAAAAMAAAAEAAAAAQAAAAUA
AAABAAAAAQAAAAAAwAQBAAAAAAAGAEAD2gYGAM8D2gYGAIwCxwYPAE4HAAAGALkCYwUGACMDYwUG
AAQDYwUGALYDYwUGAGADYwUGAHkDYwUGANACYwUGAOsCCgQKAJQDbwQKANoBbwQOAOQFRQgOAOMA
RQgOAB4BXwAGAA8GLgAOAMIFjwAGAKAGsQcOAMgAjwAOAIAGjwAGACgB9gQGAPIF9gQGAP0E9gQG
AG8CxwYGACMI9gQGAEUG+gYGABgGPgUSADcCqgQSAKACqgQSABECKQUGAFQC2gYKAJgEbwQWAMgH
cAEWAFUGcAEGACYE9gQOAMsA/AUOAJ4BXwAOAIoFRQgOAHMGRQgOAMUF/AUOAJEGRQgOAIMG/AUO
AKEFXwAOAPYBXwAOAHoIXwAGADMGLgAGACQGLgAOALgAjwAGAMMA9gQOAHUFXwAOAB4FXwAOAJAB
XwAOAGcG/AUGAKUB9gQGADQB9gQGAIYIYwUAAAAAJQAAAAAAAQABAAEAEAATBWsAOQABAAEAAAAQ
AAEHXQdtAAEABAAAARAAnAddB4EAAwAIAAMBAADzBwAAZQAEAAsAEQACBV0BEQDKAWEBEQDuAGUB
BgZXAGkBVoDjB2wBVoCqAWwBUCAAAAAAgQABCHABAQDUIQAAAACGABkFBgAFABgnAAAAAIYYugYG
AAUAICcAAAAAgxi6BgYABQAoJwAAAACTCEEGeAEFAFQnAAAAAJMIsgF9AQUAWycAAAAAkwi+AYIB
BQBjJwAAAACWCCoIiAEGAGonAAAAAIYYugYGAAYAcicAAAAAkRjABo0BBgAAAAEALQQAAAIArgAA
AAMARAQAAAQATAIAAAEABAQJALoGAQARALoGBgAZALoGCgApALoGEAAxALoGEAA5ALoGEABBALoG
EABJALoGEABRALoGEABZALoGEABhALoGEABpALoGBgDRALoGBgD5ALoGFQAJAboGBgB5ALoGBgBx
AOsHJgARAcQHLAAZAe0EMgARAVMFOQAhAdIFPQB5ANUAQgApAZ8IRwCBALoGEAAxAZoBTQCBALMF
VACBANQHWgBBAfcDYAAxAY8IaAC5AC8CBgBRAQ4FBgDBAP4AmQDZACQEmQBZAboGnQCJALoGBgBh
AegEpABRASkCBgCJABMIqgBxAWcIaABpAe0EsAB5Ae0EtwCBAboGEAApARwIvACBAZMHwwCJAVgB
mQApAToEygApAToE0AApARwI1QCZALoGEACRAYwH2wCZAAoB4ABxAawG6gChAFsIOQB5Ae0E7wAp
AasIRwCpALoG9ACxALoG+wCJAKUHAQGhAe0EBwGpAWEBmQApARwIDgFBAaoAFgG5Ae0DIQGhAHEI
JgERATYIAQBxALoGBgDZALoGBgDBAUYBKgHBAYIIMwHhALoGOQEBAboGBgAIABQAUwEIABgAWAEp
AHMAyAEuAAsAoAEuABMAqQEuABsAyAEuACMA0QEuACsA+gEuADMA+gEuADsA+gEuAEMA0QEuAEsA
AAIuAFMA+gEuAFsAFwJDAGMAWAFJAHMAyAFhAHsAWAFjAGsAWAEbAGwAAwABAAQAAwAAAEUGkQEA
ANIBlgEAAC4ImwECAAUAAwACAAYABQABAAcABQACAAgABwAEgAAAAQAAAHocu1wAAAAAAAABAAAA
BAAAAAAAAAAAAAAAQQGhAAAAAAAOAAAAAAAAAAAAAABKAVAEAAAAAAQAAAAAAAAAAAAAAEEBXwAA
AAAABAAAAAAAAAAAAAAAQQH2BAAAAAAOAAAAAAAAAAAAAABKATgAAAAAAAAAAAABAAAACwcAAAUA
AgAAAAAAAFNUX2IxMTkxYmU5OTA1ZjRjNjFiYTYxMWU1Y2RmOTI3YWY3ADxNb2R1bGU+AFN5c3Rl
bS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBT
VF9kZTEyZmI5ZTVlM2E0MjAzOTU3MGI0MWE5NmExZWQ0YgBTeXN0ZW0uRGF0YS5PbGVEYgBtc2Nv
cmxpYgBBZGQAcF9maWxlX2lkAE9sZURiU2NoZW1hR3VpZABPbGVEYkNvbW1hbmQAQ3JlYXRlQ29t
bWFuZABTcWxDb21tYW5kAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBHZXRPbGVEYlNjaGVt
YVRhYmxlAERhdGFUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJv
bUhhbmRsZQBnZXRfTmFtZQBnZXRfQ29sdW1uTmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5S
dW50aW1lAFNxbERiVHlwZQBzZXRfQ29tbWFuZFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVy
bmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bv
c2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAcF9zdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAc2V0X1ZhbHVlAEFkZFdp
dGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHBfdXBkX3N0
cmluZwBTdWJzdHJpbmcAcF9lcnJvcl9sb2cATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9k
ZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2IxMTkxYmU5OTA1ZjRjNjFiYTYxMWU1Y2RmOTI3
YWY3LmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0
TWFpbgBEYXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9u
AGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBT
cWxQYXJhbWV0ZXJDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9uAE9s
ZURiQ29ubmVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBT
eXN0ZW0uRGF0YS5Db21tb24ARmlsZUluZm8AQ3VsdHVyZUluZm8ARmlsZVN5c3RlbUluZm8ARGly
ZWN0b3J5SW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAERiUGFyYW1l
dGVyAFNxbFBhcmFtZXRlcgBPbGVEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAElFbnVtZXJh
dG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfZGUxMmZiOWU1ZTNh
NDIwMzk1NzBiNDFhOTZhMWVkNGIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVn
Z2luZ01vZGVzAFNUX2RlMTJmYjllNWUzYTQyMDM5NTcwYjQxYTk2YTFlZDRiLlByb3BlcnRpZXMA
VGFibGVzAEdldEZpbGVzAFNldHRpbmdzAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBn
ZXRfQ29ubmVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3Vs
dHMAdXBkYXRlX2xvZ19zdGF0dXMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABz
ZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50
AE1vdmVOZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBvcF9FcXVhbGl0
eQBvcF9JbmVxdWFsaXR5AAAAAAAVRABCAF8AQwBvAG4AbgBfAEsAVQAAC0UAcgByAG8AcgAAI3MA
cABfAHUAcABkAGEAdABlAF8AZQByAHIAXwBsAG8AZwAAD0AAZABiAG4AYQBtAGUAAAVLAFUAABFA
AGYAaQBsAGUAXwBpAGQAABdAAHMAdABhAHQAZQBfAHQAZQB4AHQAABdAAGUAcgByAG8AcgBfAHQA
ZQB4AHQAAA1TAHQAYQB0AHUAcwAAH3MAcABfAHUAcABkAGEAdABlAF8AcwB0AGEAdABlAAABAIEX
UwBFAEwARQBDAFQAIABbAEYAaQBsAGUATgBhAG0AZQBdACwAWwBTAGgAZQBlAHQATgBhAG0AZQBd
ACAALABbAEMAbwBsAHUAbQBuAE4AYQBtAGUAXQAsAFsAUwB0AGEAcgB0AGkAbgBnAEMAbwBsAHUA
bQBuAF0AIAAsAFsARQBuAGQAaQBuAGcAQwBvAGwAdQBtAG4AXQAgACwAWwBTAHQAYQByAHQAUgBl
AGEAZABpAG4AZwBGAHIAbwBtAFIAbwB3AF0AIAAgACwAWwBTAG8AdQByAGMAZQBGAG8AbABkAGUA
cgBdAEYAUgBPAE0AWwBkAGIAbwBdAC4AWwBFAFQATABfAEYAaQBsAGUATQBhAHAAXQAAAyoAAANc
AAAHWQBFAFMAAF1QAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4A
TwBMAEUARABCAC4AMQAyAC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABLOwBFAHgAdABl
AG4AZABlAGQAIABQAHIAbwBwAGUAcgB0AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwADsA
SABEAFIAPQAAETsASQBNAEUAWAA9ADAAIgAAFVQAQQBCAEwARQBfAE4AQQBNAEUAAAMwAAAtcwBl
AGwAZQBjAHQAIAB0AG8AcAAgADEAIAAqACAAIABmAHIAbwBtACAAWwAAAzoAAANdAAAvcwBlAGwA
ZQBjAHQAIAB0AG8AcAAgADEAIAAgACoAIAAgAGYAcgBvAG0AIABbAAAFXQAgAAADJwABBScALAAB
gU9JAE4AUwBFAFIAVAAgAGkAbgB0AG8AIABkAGIAbwAuAEUAVABMAF8ARgBpAGwAZQBJAG4AZgBv
AHIAbQBhAHQAaQBvAG4AIAAoAEYAaQBsAGUATgBhAG0AZQAsAFMAaABlAGUAdABOAGEAbQBlACwA
RgBpAGwAZQBTAHQAYQB0AHUAcwAsAEMAbwBsAHUAbQBuAE4AYQBtAGUALABEAG8AbgBlAG0ALABG
AGkAbABlAF8AVQBSAEwAKQAgAFYAQQBMAFUARQBTACAAKABAAHAAXwBmAGkAbABlAG4AYQBtAGUA
LABAAHAAXwBTAGgAZQBlAHQATgBhAG0AZQAsAEAAcABfAFMAdABhAHQAdQBzACwAQABwAF8AQwBv
AGwAdQBtAG4ALABAAHAAXwBkAG8AbgBlAG0ALABAAHAAXwBmAGkAbABlAHUAcgBsACkAABdAAHAA
XwBmAGkAbABlAG4AYQBtAGUAABlAAHAAXwBTAGgAZQBlAHQATgBhAG0AZQAAE0AAcABfAFMAdABh
AHQAdQBzAAAHTgBlAHcAABNAAHAAXwBjAG8AbAB1AG0AbgAAEUAAcABfAGQAbwBuAGUAbQAAFUAA
cABfAGYAaQBsAGUAdQByAGwAAHFTAFQAXwBkAGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAz
ADkANQA3ADAAYgA0ADEAYQA5ADYAYQAxAGUAZAA0AGIALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4A
UgBlAHMAbwB1AHIAYwBlAHMAAAAAAMLGWQWaeaJBhY6I23CYZ/cABCABAQgDIAABBSABARERBCAB
AQ4FIAEBEXkKBwQSPRJBEkESQQUgABKAiQUgABKAjQYgARKAkRwDIAAcBCABHBwEIAASQQUAAgIO
DgYgAQERgJ0FIAEBEj0FIAASgKEHIAISgKUOHAMgAAgsBx0IDg4ODg4ODg4ODg4OEj0SPRJFCB0S
SQgSSRJNElESVRJZEkUOCBJBEl0DIAAOBiACAQ4SPQUgAQgSRQUgABKAtQYgARKAvQgEIAEcCAYA
Aw4ODg4GIAEdEkkOBSACDggIBCABDggFAAEOHQ4EBhGAzQkgAhJFEYDNHRwEIAASUQQgARwOBiAC
AQ4STQUgAQESVQUgABKA0QYgARKA1QgHAAQODg4ODgogAxKApQ4RgNkIBCABARwDIAACCAABEoDh
EYDlBSAAEoDpByACAQ4SgOkIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYScQMGEnUDBhIQ
AgYIAwYRFAcgBAEODg4OBAAAEnEEAAASdQUAAQESdQQAABIQAwAAAQQIABJxBAgAEnUECAASEAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfZGUx
MmZiOWU1ZTNhNDIwMzk1NzBiNDFhOTZhMWVkNGIAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAx
OQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQD8AAAAAAAAAAAAAWj8AAAAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAEw/AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwA
AAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAu1x6HAAAAQC7XHocPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBkAGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAzADkANQA3ADAAYgA0ADEAYQA5ADYAYQAx
AGUAZAA0AGIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAyADkA
MAAuADIAMwA3ADMAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBi
ADEAMQA5ADEAYgBlADkAOQAwADUAZgA0AGMANgAxAGIAYQA2ADEAMQBlADUAYwBkAGYAOQAyADcA
YQBmADcALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfAGIAMQAxADkAMQBiAGUAOQA5ADAANQBmADQAYwA2ADEAYgBhADYAMQAxAGUANQBjAGQA
ZgA5ADIANwBhAGYANwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwBkAGUAMQAyAGYAYgA5AGUANQBlADMAYQA0ADIAMAAzADkANQA3ADAAYgA0ADEAYQA5ADYA
YQAxAGUAZAA0AGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcAMgA5ADAALgAyADMANwAzADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAMgA5ADAALgAyADMANwAzADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAbD8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="181"
            Column="21" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Mail"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{b46bcc9f-3937-4f35-a015-f23d04564209}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Mail"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7f4d4a3cf9d7421590b02cac0ab8a328"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SourceFolder">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d84fa12ddb014837a3d5f3a9953704e4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d84fa12ddb014837a3d5f3a9953704e4")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;

#endregion

namespace ST_d84fa12ddb014837a3d5f3a9953704e4
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string FolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
            string fileFullPath = "";
            string i_FileName, i_SheetName, i_TableName, i_ColumnName, i_fileUrl, i_fileID;
            string SchemaName = "stg";
            int k = 0;
            int j = 0;
            string connection_string = @"Data Source = ONURALIKANBB71\MSSQLSERVER01; Initial Catalog = KU; Integrated Security = True";

            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            using (SqlConnection sqlcon = new SqlConnection(connection_string))
            {
                sqlcon.Open();
                SqlDataAdapter sqlDA = new SqlDataAdapter("select i.FileName,i.SheetName,TableName,i.ColumnName,i.File_URL,i.FileID from dbo.ETL_FileInformation i join  dbo.ETL_FileMap f on i.FileName=f.FileName and i.SheetName=f.SheetName and i.FileStatus='New' ", sqlcon);
                DataTable dta = new DataTable();
                sqlDA.Fill(dta);
                sqlcon.Close();
            }

            // TODO: Add your code here
            string sourceFile = FolderPath;
            string destinationFile = FolderPath;

            // To move a file or folder to a new location:
            System.IO.File.Move(sourceFile, destinationFile);

            // To move an entire directory. To programmatically modify or combine
            // path strings, use the System.IO.Path class.
            System.IO.Directory.Move(@"C:\Users\Public\public\test\", @"C:\Users\Public\private");
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_d84fa12ddb014837a3d5f3a9953704e4</msb:CodeName>
    <msb:DisplayName>ST_d84fa12ddb014837a3d5f3a9953704e4</msb:DisplayName>
    <msb:ProjectId>{F04F7526-D129-4F3F-B2FA-F57FDDF06B91}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_7f4d4a3cf9d7421590b02cac0ab8a328.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Settings.get_Default():ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Sett" +
    "ings")]

namespace ST_d84fa12ddb014837a3d5f3a9953704e4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7f4d4a3cf9d7421590b02cac0ab8a328.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{E29C6762-A37F-4117-B057-FE976F667930}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_d84fa12ddb014837a3d5f3a9953704e4</RootNamespace><AssemblyName>ST_7f4d4a3cf9d7421590b02cac0ab8a328</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST140</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d84fa12ddb014837a3d5f3a9953704e4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_d84fa12ddb014837a3d5f3a9953704e4.dll">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
8gQGAAgAFACJAAgAGACOACkAcwD2AC4ACwDOAC4AEwDXAC4AGwD2AC4AIwD/AC4AKwAoAS4AMwAo
AS4AOwAoAS4AQwD/AC4ASwAuAS4AUwAoAS4AWwBFAUMAYwCOAEkAcwD2AGEAewCOAGMAawCOABsA
AwABAAQAAwAAALMEvwAAABkBxAAAABQGyQACAAQAAwACAAUABQABAAYABQACAAcABwAEgAAAAQAA
AGscnTgAAAAAAAABAAAABAAAAAAAAAAAAAAAdwBrAAAAAAAOAAAAAAAAAAAAAACAAEkDAAAAAAQA
AAAAAAAAAAAAAHcAXwAAAAAABAAAAAAAAAAAAAAAdwDvAwAAAAAOAAAAAAAAAAAAAACAADgAAAAA
AAAAAAABAAAAQwUAAAUAAgAAAABTVF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRlNAA8
TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18A
U3lzdGVtLkRhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBWYXJpYWJsZQBJ
RGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9D
dWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGlj
YXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21w
aWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVn
Z2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRy
aWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRl
AEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmli
dXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmli
dXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0
dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRy
aWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAE1vdmUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0
cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9k
ZWwAU1RfZDg0ZmExMmRkYjAxNDgzN2EzZDVmM2E5OTUzNzA0ZTQuZGxsAEZpbGwAZ2V0X0l0ZW0A
U3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0uRGF0
YS5Db21tb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdl
cgBEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25v
c3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNU
X2Q4NGZhMTJkZGIwMTQ4MzdhM2Q1ZjNhOTk1MzcwNGU0LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRl
NC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nl
c3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3Vs
dABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0Fzc2VtYmx5AERpcmVjdG9yeQAAJVUAcwBlAHIA
OgA6AFMAbwB1AHIAYwBlAEYAbwBsAGQAZQByAACAuUQAYQB0AGEAIABTAG8AdQByAGMAZQAgAD0A
IABPAE4AVQBSAEEATABJAEsAQQBOAEIAQgA3ADEAXABNAFMAUwBRAEwAUwBFAFIAVgBFAFIAMAAx
ADsAIABJAG4AaQB0AGkAYQBsACAAQwBhAHQAYQBsAG8AZwAgAD0AIABLAFUAOwAgAEkAbgB0AGUA
ZwByAGEAdABlAGQAIABTAGUAYwB1AHIAaQB0AHkAIAA9ACAAVAByAHUAZQAAFUQAQgBfAEMAbwBu
AG4AXwBLAFUAAIGZcwBlAGwAZQBjAHQAIABpAC4ARgBpAGwAZQBOAGEAbQBlACwAaQAuAFMAaABl
AGUAdABOAGEAbQBlACwAVABhAGIAbABlAE4AYQBtAGUALABpAC4AQwBvAGwAdQBtAG4ATgBhAG0A
ZQAsAGkALgBGAGkAbABlAF8AVQBSAEwALABpAC4ARgBpAGwAZQBJAEQAIABmAHIAbwBtACAAZABi
AG8ALgBFAFQATABfAEYAaQBsAGUASQBuAGYAbwByAG0AYQB0AGkAbwBuACAAaQAgAGoAbwBpAG4A
IAAgAGQAYgBvAC4ARQBUAEwAXwBGAGkAbABlAE0AYQBwACAAZgAgAG8AbgAgAGkALgBGAGkAbABl
AE4AYQBtAGUAPQBmAC4ARgBpAGwAZQBOAGEAbQBlACAAYQBuAGQAIABpAC4AUwBoAGUAZQB0AE4A
YQBtAGUAPQBmAC4AUwBoAGUAZQB0AE4AYQBtAGUAIABhAG4AZAAgAGkALgBGAGkAbABlAFMAdABh
AHQAdQBzAD0AJwBOAGUAdwAnACAAATlDADoAXABVAHMAZQByAHMAXABQAHUAYgBsAGkAYwBcAHAA
dQBiAGwAaQBjAFwAdABlAHMAdABcAAAvQwA6AFwAVQBzAGUAcgBzAFwAUAB1AGIAbABpAGMAXABw
AHIAaQB2AGEAdABlAABxUwBUAF8AZAA4ADQAZgBhADEAMgBkAGQAYgAwADEANAA4ADMANwBhADMA
ZAA1AGYAMwBhADkAOQA1ADMANwAwADQAZQA0AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBz
AG8AdQByAGMAZQBzAAAA02h2iXM2PEmik3pvQ/zeQAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQER
WQkHBQ4ODhI9EkEEIAASaQQgABJtBSABEnEcAyAAHAMgAA4EIAASdQUgARJ5HAQgARwcBiACAQ4S
PQUgAQgSQQUAAgEODggAARKAlRGAmQUgABKAnQcgAgEOEoCdCLd6XFYZNOCJCImEXc2AgMyRBAAA
AAAEAQAAAAMGElEDBhJVAwYSEAIGCAMGERQEAAASUQQAABJVBQABARJVBAAAEhADAAABBAgAElEE
CAASVQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAA
ACgBACNTVF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRlNAAABQEAAAAAFgEAEUNvcHly
aWdodCBAICAyMDE5AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5S
ZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1
cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3Vy
Y2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAmDIAAAAAAAAAAAAA
sjIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQyAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNj
b3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAnThrHAAAAQCdOGscPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAA
AABTAFQAXwBkADgANABmAGEAMQAyAGQAZABiADAAMQA0ADgAMwA3AGEAMwBkADUAZgAzAGEAOQA5
ADUAMwA3ADAANABlADQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4A
NwAyADcANQAuADEANAA0ADkAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABT
AFQAXwBkADgANABmAGEAMQAyAGQAZABiADAAMQA0ADgAMwA3AGEAMwBkADUAZgAzAGEAOQA5ADUA
MwA3ADAANABlADQALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAA
AEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIA
YQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfAGQAOAA0AGYAYQAxADIAZABkAGIAMAAxADQAOAAzADcAYQAzAGQANQBmADMA
YQA5ADkANQAzADcAMAA0AGUANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBl
AAAAAABTAFQAXwBkADgANABmAGEAMQAyAGQAZABiADAAMQA0ADgAMwA3AGEAMwBkADUAZgAzAGEA
OQA5ADUAMwA3ADAANABlADQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADcAMgA3ADUALgAxADQANAA5ADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYA
ZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMgA3ADUALgAxADQANAA5ADMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAxDIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Remove_File"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{1D7204A9-85B6-4738-90D6-F6A1239EE9E4}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Remove_File"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d84fa12ddb014837a3d5f3a9953704e4"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SourceFolder">
          <ProjectItem
            Name="ST_d84fa12ddb014837a3d5f3a9953704e4.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{E29C6762-A37F-4117-B057-FE976F667930}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d84fa12ddb014837a3d5f3a9953704e4</RootNamespace>
    <AssemblyName>ST_d84fa12ddb014837a3d5f3a9953704e4</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Settings.get_Default():ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Sett" +
    "ings")]

namespace ST_d84fa12ddb014837a3d5f3a9953704e4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;

#endregion

namespace ST_d84fa12ddb014837a3d5f3a9953704e4
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string FolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
            string fileFullPath = "";
            string i_FileName, i_SheetName, i_TableName, i_ColumnName, i_fileUrl, i_fileID, str_exception,i_fileSucces,i_fileErr,i_fileStatus;
            string SchemaName = "stg";
            string strExpection="";
            int k = 0;
            int j = 0;
            //string connection_string = @"Data Source = ONURALIKANBB71\MSSQLSERVER01; Initial Catalog = KU; Integrated Security = True";

            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            using (SqlConnection sqlcon = myADONETConnection)
            {
                if (sqlcon.State == ConnectionState.Closed)
                {
                    try
                    {
                        sqlcon.Open();
                    }
                    catch (Exception ex)
                    {
                        str_exception = ex.Message.ToString();
                    }

                }
                SqlDataAdapter sqlDA = new SqlDataAdapter("select i.FileName,i.SheetName,TableName,i.ColumnName,i.File_URL,i.FileID,f.SchemaName,f.SourceFolder,f.FolderSucces,f.FolderError,i.FileStatus from dbo.ETL_FileInformation i join  dbo.ETL_FileMap f on i.FileName=f.FileName and i.SheetName=f.SheetName and i.FileStatus like '%DWH%' ", sqlcon);

                DataTable dta = new DataTable();
                sqlDA.Fill(dta);
                sqlcon.Close();
                int count_sqlDA = dta.Rows.Count;                
                MessageBox.Show("ADET" + count_sqlDA.ToString());                
                for (int y = 0; y < count_sqlDA; y++)                
                {                      k = k + 1;                    
                    DataRow drTable = dta.Rows[y];
                    /// string columnvalue = drTable["TABLE_NAME"].ToString();                    
                    /// // foreach (DataColumn column in dta.Columns)                    
                    /// //{                    
                     i_FileName = drTable[0].ToString();                   
                     i_SheetName = drTable[1].ToString();                    
                     i_TableName = drTable[2].ToString();                    
                     i_ColumnName = drTable[3].ToString();
                     i_fileUrl = drTable[4].ToString();                    
                     i_fileID = drTable[5].ToString();                    
                     SchemaName = drTable[6].ToString();                   
                     FolderPath = drTable[7].ToString();
                     i_fileSucces = drTable[8].ToString();
                     i_fileErr= drTable[9].ToString();
                     i_fileStatus = drTable[10].ToString();
                    FolderPath= FolderPath+"\\";
                    string source_move = "";
                    string target_move_ok = "";
                    string target_move_err = "";
                    FolderPath= FolderPath + "" + i_fileUrl;
                    target_move_err = i_fileSucces + "" + i_fileUrl;
                    target_move_ok = i_fileErr + "" + i_fileUrl;
                    if (i_fileStatus=="DWH_OK")
                    { try { System.IO.File.Move(@FolderPath, @target_move_ok); }
                        catch (Exception ex)
                        {
                            strExpection = ex.Message.ToString();
                        }
                        
                    }
                    else if (i_fileStatus == "DWH_ERR")
                    {
                        try { System.IO.File.Move(@FolderPath, @target_move_err); }
                        catch (Exception ex)
                        {
                            strExpection = ex.Message.ToString();
                        }
                    }
                }


            }

            // TODO: Add your code here
            //string sourceFile = FolderPath;
            //string destinationFile = FolderPath;

            // To move a file or folder to a new location:
           // System.IO.File.Move(sourceFile, destinationFile);

            // To move an entire directory. To programmatically modify or combine
            // path strings, use the System.IO.Path class.
            //System.IO.Directory.Move(@"C:\Users\Public\public\test\", @"C:\Users\Public\private");
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d84fa12ddb014837a3d5f3a9953704e4</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d84fa12ddb014837a3d5f3a9953704e4</msb:DisplayName>
    <msb:ProjectId>{71B05815-5D94-40D4-B4DA-A391C9E57EF8}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d84fa12ddb014837a3d5f3a9953704e4.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:Breakpoint Include="53224fceec844e22be3c7a472e3b8a62">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>128</msb:LineNumber>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="6ffbab7631cf44ccb17da8e2dca70c0b">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>97</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="73dcfe3fca7246e2b2a384260e4156ee">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>146</msb:LineNumber>
      <msb:ColumnNumber>21</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="e730db0619a146fc87d31eb66ef4da04">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>142</msb:LineNumber>
      <msb:ColumnNumber>22</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="79f2688db65b4a0ab887f84d056f45bc">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>163</msb:LineNumber>
      <msb:ColumnNumber>29</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d84fa12ddb014837a3d5f3a9953704e4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d84fa12ddb014837a3d5f3a9953704e4")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d84fa12ddb014837a3d5f3a9953704e4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d84fa12ddb014837a3d5f3a9953704e4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_d84fa12ddb014837a3d5f3a9953704e4.dll">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
/AaYBAAAAAArAAAAAAABAAEAAQAQAFMEBwA5AAEAAQAAABAAnAX4BVEAAQADAAABEAA1BvgFZQAD
AAcAAwEAAHMGAABJAAQACgARAEIEyQARACMBzQARAHoA0QAGBl0A1QBWgGMG2ABWgAMB2ABQIAAA
AACGAFkEBgABANAiAAAAAIYYVQUGAAEA2CIAAAAAgxhVBQYAAQDgIgAAAACTCBIF3AABAAwjAAAA
AJMICwHhAAEAEyMAAAAAkwgXAeYAAQAbIwAAAACWCJgG7AACACIjAAAAAIYYVQUGAAIAKiMAAAAA
kRhbBfEAAgAAAAEAYgMJAFUFAQARAFUFBgAZAFUFCgApAFUFEAAxAFUFEAA5AFUFEABBAFUFEABJ
AFUFEABRAFUFEABZAFUFEABhAFUFEABpAFUFBgCZAFUFBgDBAFUFFQDRAFUFBgBxAGsGLADZACcG
MQDhAC0ENgDpAFgDPAChAIcDQAB5AFUFBgDZAFMGRADxAC0ESQDZAIgEPAD5AMkETwABAZABVAAB
AU4EBgCJAIoAQAARAVUFWgCBAFUFBgAZASgEYQABAYIBBgCBAIEGZwApAdYGbQAxAYcDQAA5AYoG
cQBBAegGdwAhAS0EfgBRAS0EhQA5AQUHigBZAWgDkABhAYgBBgDZALEGAQBxAFUFBgChAFUFBgBp
AccAlgBpAfgGnwCpAFUFpQDJAFUFBgAIABQAvwAIABgAxAApAHMALAEuAAsABAEuABMADQEuABsA
LAEuACMANQEuACsAXgEuADMAXgEuADsAXgEuAEMANQEuAEsAZAEuAFMAXgEuAFsAewFDAGMAxABJ
AHMALAFhAHsAxABjAGsAxAAbAAMAAQAEAAMAAAAWBfUAAAArAfoAAACcBv8AAgAEAAMAAgAFAAUA
AQAGAAUAAgAHAAcABIAAAAEAAAB6HP1wAAAAAAAABwAAAAQAAAAAAAAAAAAAAK0AcQAAAAAADgAA
AAAAAAAAAAAAtgCQAwAAAAAEAAAAAAAAAAAAAACtAGUAAAAAAAQAAAAAAAAAAAAAAK0ANgQAAAAA
DgAAAAAAAAAAAAAAtgA+AAAAAAAEAAAAAAAAAAAAAACtAD4GAAAAAAAAAAABAAAApgUAAAUAAgAA
AABJbnQzMgBTVF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRlNAA8TW9kdWxlPgBTeXN0
ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEA
bXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAERhdGFUYWJsZQBWYXJpYWJsZQBJ
RGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9D
dWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJu
YWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9z
ZQBnZXRfU3RhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29ubmVjdGlvblN0YXRlAENvbXBpbGVy
R2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJs
ZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0
ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNz
ZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUA
QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmli
dXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0
ZQBnZXRfVmFsdWUAdmFsdWUATW92ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5n
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5U
YXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABT
VF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRlNC5kbGwARmlsbABnZXRfSXRlbQBTeXN0
ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
U3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERh
dGFSb3dDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0
aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNl
TWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2Q4NGZhMTJkZGIwMTQ4MzdhM2Q1ZjNhOTk1MzcwNGU0
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9kODRmYTEy
ZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRlNC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGlu
Z3MAU3lzdGVtLldpbmRvd3MuRm9ybXMAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBT
Y3JpcHRSZXN1bHRzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVz
dWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ291bnQARGF0YVJv
dwBTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AG9wX0VxdWFsaXR5AAAAAAAlVQBzAGUAcgA6
ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAABVEAEIAXwBDAG8AbgBuAF8ASwBVAACCM3MAZQBs
AGUAYwB0ACAAaQAuAEYAaQBsAGUATgBhAG0AZQAsAGkALgBTAGgAZQBlAHQATgBhAG0AZQAsAFQA
YQBiAGwAZQBOAGEAbQBlACwAaQAuAEMAbwBsAHUAbQBuAE4AYQBtAGUALABpAC4ARgBpAGwAZQBf
AFUAUgBMACwAaQAuAEYAaQBsAGUASQBEACwAZgAuAFMAYwBoAGUAbQBhAE4AYQBtAGUALABmAC4A
UwBvAHUAcgBjAGUARgBvAGwAZABlAHIALABmAC4ARgBvAGwAZABlAHIAUwB1AGMAYwBlAHMALABm
AC4ARgBvAGwAZABlAHIARQByAHIAbwByACwAaQAuAEYAaQBsAGUAUwB0AGEAdAB1AHMAIABmAHIA
bwBtACAAZABiAG8ALgBFAFQATABfAEYAaQBsAGUASQBuAGYAbwByAG0AYQB0AGkAbwBuACAAaQAg
AGoAbwBpAG4AIAAgAGQAYgBvAC4ARQBUAEwAXwBGAGkAbABlAE0AYQBwACAAZgAgAG8AbgAgAGkA
LgBGAGkAbABlAE4AYQBtAGUAPQBmAC4ARgBpAGwAZQBOAGEAbQBlACAAYQBuAGQAIABpAC4AUwBo
AGUAZQB0AE4AYQBtAGUAPQBmAC4AUwBoAGUAZQB0AE4AYQBtAGUAIABhAG4AZAAgAGkALgBGAGkA
bABlAFMAdABhAHQAdQBzACAAbABpAGsAZQAgACcAJQBEAFcASAAlACcAIAABCUEARABFAFQAAANc
AAABAA1EAFcASABfAE8ASwAAD0QAVwBIAF8ARQBSAFIAAHFTAFQAXwBkADgANABmAGEAMQAyAGQA
ZABiADAAMQA0ADgAMwA3AGEAMwBkADUAZgAzAGEAOQA5ADUAMwA3ADAANABlADQALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAfUvnheylL0+iDw8Pv4m2PAAEIAEB
CAMgAAEFIAEBEREEIAEBDgUgAQERXRAHDA4ODg4OCBI9EkEICA4OBCAAEm0EIAAScQUgARJ1HAMg
ABwDIAAOBCAAEnkFIAESfRwEIAEcHAUgABGAhQYgAgEOEj0FIAEIEkEFIAASgJEDIAAIBQACDg4O
BgABEYClDgYgARKAqQgEIAEcCAUAAgIODgUAAgEODggAARKAtRGAuQUgABKAvQcgAgEOEoC9CLd6
XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGElUDBhJZAwYSEAIGCAMGERQEAAASVQQAABJZBQAB
ARJZBAAAEhADAAABBAgAElUECAASWQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9kODRmYTEyZGRiMDE0ODM3YTNkNWYzYTk5NTM3MDRl
NAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE5AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAALQAAADO
yu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZl
cnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5
MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFE
UEFEULQAAABYNQAAAAAAAAAAAAByNQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZDUAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQD9cHocAAABAP1wehw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfAGQAOAA0AGYAYQAxADIAZABkAGIAMAAxADQAOAAzADcAYQAzAGQANQBmADMAYQA5ADkA
NQAzADcAMAA0AGUANAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3
ADIAOQAwAC4AMgA4ADkAMgA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfAGQAOAA0AGYAYQAxADIAZABkAGIAMAAxADQAOAAzADcAYQAzAGQANQBmADMAYQA5ADkANQAz
ADcAMAA0AGUANAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA5AAAAKgABAAEATABlAGcAYQBsAFQAcgBh
AGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEA
bQBlAAAAUwBUAF8AZAA4ADQAZgBhADEAMgBkAGQAYgAwADEANAA4ADMANwBhADMAZAA1AGYAMwBh
ADkAOQA1ADMANwAwADQAZQA0AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUA
AAAAAFMAVABfAGQAOAA0AGYAYQAxADIAZABkAGIAMAAxADQAOAAzADcAYQAzAGQANQBmADMAYQA5
ADkANQAzADcAMAA0AGUANAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4ANwAyADkAMAAuADIAOAA5ADIANQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANwAyADkAMAAuADIAOAA5ADIANQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAACENQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="128"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="97"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="142"
            Column="22" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="146"
            Column="21" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="163"
            Column="29" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\STG_to_DWH"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{C53017B9-3778-4384-BB76-6E7B9B978FF2}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="STG_to_DWH"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_e8776b4be48f42a48f3220ee9b760ab8"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_e8776b4be48f42a48f3220ee9b760ab8.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{b39bfde8-d402-4bfd-8d0a-a7c5ca75b1b6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_e8776b4be48f42a48f3220ee9b760ab8</RootNamespace>
    <AssemblyName>ST_e8776b4be48f42a48f3220ee9b760ab8</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
#endregion

namespace ST_e8776b4be48f42a48f3220ee9b760ab8
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 
        private void p_insert_dwh_table(string p_source_schema, string SourceTable, string p_pk_params, string p_etl_type, string p_donem, string p_file_id)
        {
        
            SqlConnection myLogConnection = new SqlConnection();
            myLogConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            SqlCommand cmd = myLogConnection.CreateCommand();
            //ALTER procedure [dbo].[sp_insert_dwh_table] @SourceSchema varchar(50) , @SourceTable varchar(50),@pk_params  varchar(50),@p_donem  varchar(50),@p_etl_type  varchar(50)

            using (SqlCommand query_s_state = new SqlCommand("[sp_insert_dwh_table]"))
                {
                //exec[dbo].[sp_insert_dwh_table] 'GNSK' , 'KU_STG_TRACKIT_YURTLAR_CTRACK' ,''  ,''  ,'EXIST ID'      cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@SourceSchema", p_source_schema);
                    query_s_state.Parameters.AddWithValue("@SourceTable", SourceTable);
                    query_s_state.Parameters.AddWithValue("@pk_params", p_pk_params);
                    query_s_state.Parameters.AddWithValue("@p_donem", p_donem);
                    query_s_state.Parameters.AddWithValue("@p_etl_type ", p_etl_type);
                //myADONETConnection.Open();
                try { 
                    query_s_state.ExecuteNonQuery();
                   } catch(Exception ex)
                   {
                    string var_exception = ex.Message.ToString();

                    update_log_status("Error", p_file_id, var_exception, "ERR_DWH");
                  }
                }

        }
        private void update_log_status(string p_upd_string, string p_file_id, string p_error_log, string p_state)
        {

            SqlConnection myLogConnection = new SqlConnection();
            myLogConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            SqlCommand cmd = myLogConnection.CreateCommand();
            if (p_upd_string == "Error")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_err_log"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }
            if (p_upd_string == "Status")
            {
                using (SqlCommand query_s_state = new SqlCommand("sp_update_state"))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    query_s_state.Connection = myLogConnection;
                    query_s_state.CommandType = CommandType.StoredProcedure;
                    query_s_state.Parameters.AddWithValue("@dbname", "KU");
                    query_s_state.Parameters.AddWithValue("@file_id", p_file_id);
                    query_s_state.Parameters.AddWithValue("@state_text", p_state);
                    query_s_state.Parameters.AddWithValue("@error_text", p_error_log);
                    //myADONETConnection.Open();
                    query_s_state.ExecuteNonQuery();
                }
            }

        }
        public void Main()
		{
            //string FolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
           // string fileFullPath = "";
            string i_FileName, i_SheetName, i_TableName, i_ColumnName, i_fileUrl, i_fileID,i_ETL_type, i_SchemaName;
            string SchemaName = "stg";
            int k = 0;
            int j = 0;
            string connection_string = @"Data Source = ONURALIKANBB71\MSSQLSERVER01; Initial Catalog = KU; Integrated Security = True";
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_KU"].AcquireConnection(Dts.Transaction) as SqlConnection);
            using (SqlConnection sqlcon = new SqlConnection(connection_string))
            {
                sqlcon.Open();
                SqlDataAdapter sqlDA = new SqlDataAdapter("select i.FileName,i.SheetName,TableName,i.ColumnName,i.File_URL,i.FileID,DWH_ETL_Type,SchemaName from dbo.ETL_FileInformation i join  dbo.ETL_FileMap f on i.FileName=f.FileName and i.SheetName=f.SheetName and i.FileStatus='STG' ", sqlcon);
                DataTable dta = new DataTable();
                sqlDA.Fill(dta);
                sqlcon.Close();

                int count_sqlDA = dta.Rows.Count;
                for (int y = 0; y < count_sqlDA; y++)
                {

                    k = k + 1;
                    DataRow drTable = dta.Rows[y];
                    /// string columnvalue = drTable["TABLE_NAME"].ToString();
                    // foreach (DataColumn column in dta.Columns)
                    //{
                    i_FileName = drTable[0].ToString();
                    i_SheetName = drTable[1].ToString();
                    i_TableName = drTable[2].ToString();
                    i_ColumnName = drTable[3].ToString();
                    i_fileUrl = drTable[4].ToString();
                    i_fileID = drTable[5].ToString();
                    i_ETL_type = drTable[6].ToString();
                    i_SchemaName = drTable[7].ToString();
                    try
                    {
                        //exec[dbo].[sp_insert_dwh_table] 'GNSK' , 'KU_STG_TRACKIT_YURTLAR_CTRACK' ,''  ,''  ,'EXIST ID'      cmd.CommandType = CommandType.StoredProcedure;
                        if(i_ETL_type=="EXIST ID")
                        { 
                            p_insert_dwh_table(i_SchemaName, i_TableName, "", i_ETL_type, "", i_fileID);
                            update_log_status("Status", i_fileID, "", "DWH");
                        }
                        
                    }
                    catch (Exception e)
                    {
                        string var_exception = e.Message.ToString();
                        update_log_status("Error", i_fileID, var_exception, "ERR_DWH");
                    }
                        
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
            }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_e8776b4be48f42a48f3220ee9b760ab8</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_e8776b4be48f42a48f3220ee9b760ab8</msb:DisplayName>
    <msb:ProjectId>{BF9A888A-FE94-44E8-89F2-2F155803C8F3}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_e8776b4be48f42a48f3220ee9b760ab8.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="d06bd56d621c424b8ab4a9d94139c618">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>25</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>217</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="3cfc49060ae2456981c6fd5374d8b171">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>29</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>210</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="dad7a8fb3c184d818c4d547b6a4c470b">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>209</msb:LineNumber>
      <msb:ColumnNumber>29</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Settings.get_Default():ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Sett" +
    "ings")]

namespace ST_e8776b4be48f42a48f3220ee9b760ab8.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e8776b4be48f42a48f3220ee9b760ab8")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e8776b4be48f42a48f3220ee9b760ab8")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e8776b4be48f42a48f3220ee9b760ab8.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e8776b4be48f42a48f3220ee9b760ab8.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_e8776b4be48f42a48f3220ee9b760ab8.dll">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
6QUQAIEANAVBAPkAPAFHAIEA4AZOAAkBmgNUAPkAfwdcAIkAtwBgAKkAxwNgABkB3AEGACEBjwdv
AHkA6QUQACkBrwQGADEB6QWEAJEA6QUGADkBgQSLACkB1gEGAJEAHweRAEkBYAdcAEEBjgSXAFEB
jgSeAOEAOwcBAHEA6QUGAKkA6QUGAFkBCgGjAFkBcgesALEA6QWyANEA6QUGAAgAFADMAAgAGADR
ACkAcwBLAS4ACwAjAS4AEwAsAS4AGwBLAS4AIwBUAS4AKwB9AS4AMwB9AS4AOwB9AS4AQwBUAS4A
SwCDAS4AUwB9AS4AWwCaAUMAYwDRAEkAcwBLAWEAewDRAGMAawDRABsAZAB1AAMAAQAEAAMAAACd
BRQBAAB/ARkBAAAzBx4BAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAABxHM5jAAAAAAAA
AQAAAAQAAAAAAAAAAAAAALoAcQAAAAAADgAAAAAAAAAAAAAAwwDpAwAAAAAEAAAAAAAAAAAAAAC6
AGUAAAAAAAQAAAAAAAAAAAAAALoAlwQAAAAADgAAAAAAAAAAAAAAwwAuAAAAAAAAAAAAAQAAADoG
AAAFAAIAAAAAU1RfZTg3NzZiNGJlNDhmNDJhNDhmMzIyMGVlOWI3NjBhYjgAPE1vZHVsZT4ATWlj
cm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AcF9zb3VyY2Vfc2NoZW1hAFN5c3Rl
bS5EYXRhAG1zY29ybGliAHBfZmlsZV9pZABEYkNvbW1hbmQAQ3JlYXRlQ29tbWFuZABTcWxDb21t
YW5kAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBEYXRhVGFibGUAU291cmNlVGFibGUASURp
c3Bvc2FibGUAcF9pbnNlcnRfZHdoX3RhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9t
SGFuZGxlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAc2V0X0NvbW1hbmRUeXBlAHBf
ZXRsX3R5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUA
VlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
cF9zdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0
cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2Vt
Ymx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3
b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2Ny
aXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQ
cm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNr
RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBh
dGliaWxpdHlBdHRyaWJ1dGUAQWRkV2l0aFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNp
b25pbmcAVG9TdHJpbmcAcF91cGRfc3RyaW5nAHBfZXJyb3JfbG9nAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNj
cmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9lODc3NmI0YmU0OGY0MmE0
OGYzMjIwZWU5Yjc2MGFiOC5kbGwARmlsbABwX2RvbmVtAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJl
c291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsUGFyYW1ldGVy
Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBzZXRfQ29ubmVjdGlvbgBEYkNvbm5lY3Rpb24A
QWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29t
bW9uAEN1bHR1cmVJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3Fs
UGFyYW1ldGVyAERiRGF0YUFkYXB0ZXIAU3FsRGF0YUFkYXB0ZXIALmN0b3IALmNjdG9yAFN5c3Rl
bS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNv
dXJjZXMAU1RfZTg3NzZiNGJlNDhmNDJhNDhmMzIyMGVlOWI3NjBhYjguUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2U4Nzc2YjRiZTQ4ZjQyYTQ4ZjMyMjBl
ZTliNzYwYWI4LlByb3BlcnRpZXMAU2V0dGluZ3MAcF9wa19wYXJhbXMAZ2V0X0Nvbm5lY3Rpb25z
AGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAHVwZGF0ZV9sb2df
c3RhdHVzAGdldF9Sb3dzAE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0u
RGF0YS5TcWxDbGllbnQAZ2V0X0NvdW50AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25R
dWVyeQBvcF9FcXVhbGl0eQAAABVEAEIAXwBDAG8AbgBuAF8ASwBVAAArWwBzAHAAXwBpAG4AcwBl
AHIAdABfAGQAdwBoAF8AdABhAGIAbABlAF0AABtAAFMAbwB1AHIAYwBlAFMAYwBoAGUAbQBhAAAZ
QABTAG8AdQByAGMAZQBUAGEAYgBsAGUAABVAAHAAawBfAHAAYQByAGEAbQBzAAARQABwAF8AZABv
AG4AZQBtAAAZQABwAF8AZQB0AGwAXwB0AHkAcABlACAAAAtFAHIAcgBvAHIAAA9FAFIAUgBfAEQA
VwBIAAAjcwBwAF8AdQBwAGQAYQB0AGUAXwBlAHIAcgBfAGwAbwBnAAAPQABkAGIAbgBhAG0AZQAA
BUsAVQAAEUAAZgBpAGwAZQBfAGkAZAAAF0AAcwB0AGEAdABlAF8AdABlAHgAdAAAF0AAZQByAHIA
bwByAF8AdABlAHgAdAAADVMAdABhAHQAdQBzAAAfcwBwAF8AdQBwAGQAYQB0AGUAXwBzAHQAYQB0
AGUAAIC5RABhAHQAYQAgAFMAbwB1AHIAYwBlACAAPQAgAE8ATgBVAFIAQQBMAEkASwBBAE4AQgBC
ADcAMQBcAE0AUwBTAFEATABTAEUAUgBWAEUAUgAwADEAOwAgAEkAbgBpAHQAaQBhAGwAIABDAGEA
dABhAGwAbwBnACAAPQAgAEsAVQA7ACAASQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBp
AHQAeQAgAD0AIABUAHIAdQBlAACByXMAZQBsAGUAYwB0ACAAaQAuAEYAaQBsAGUATgBhAG0AZQAs
AGkALgBTAGgAZQBlAHQATgBhAG0AZQAsAFQAYQBiAGwAZQBOAGEAbQBlACwAaQAuAEMAbwBsAHUA
bQBuAE4AYQBtAGUALABpAC4ARgBpAGwAZQBfAFUAUgBMACwAaQAuAEYAaQBsAGUASQBEACwARABX
AEgAXwBFAFQATABfAFQAeQBwAGUALABTAGMAaABlAG0AYQBOAGEAbQBlACAAZgByAG8AbQAgAGQA
YgBvAC4ARQBUAEwAXwBGAGkAbABlAEkAbgBmAG8AcgBtAGEAdABpAG8AbgAgAGkAIABqAG8AaQBu
ACAAIABkAGIAbwAuAEUAVABMAF8ARgBpAGwAZQBNAGEAcAAgAGYAIABvAG4AIABpAC4ARgBpAGwA
ZQBOAGEAbQBlAD0AZgAuAEYAaQBsAGUATgBhAG0AZQAgAGEAbgBkACAAaQAuAFMAaABlAGUAdABO
AGEAbQBlAD0AZgAuAFMAaABlAGUAdABOAGEAbQBlACAAYQBuAGQAIABpAC4ARgBpAGwAZQBTAHQA
YQB0AHUAcwA9ACcAUwBUAEcAJwAgAAERRQBYAEkAUwBUACAASQBEAAABAAdEAFcASAAAcVMAVABf
AGUAOAA3ADcANgBiADQAYgBlADQAOABmADQAMgBhADQAOABmADMAMgAyADAAZQBlADkAYgA3ADYA
MABhAGIAOAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAqKjx
6igEpEumxhoUTi+C4gAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERYQcHAxI9EkEOBCAAEnEEIAAS
dQUgARJ5HAMgABwEIAEcHAQgABJBBSABARI9BiABARGAgQUgABKAhQcgAhKAiQ4cAyAACAMgAA4K
BwQSPRJBEkESQQUAAgIODg4HCg4ODg4IEj0SSQgIDgYgAgEOEj0FIAEIEkkFIAASgKEGIAESgKkI
BCABHAgIAAESgK0RgLEFIAASgLUHIAIBDhKAtQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAD
BhJZAwYSXQMGEhACBggDBhEUCSAGAQ4ODg4ODgcgBAEODg4OBAAAElkEAAASXQUAAQESXQQAABIQ
AwAAAQQIABJZBAgAEl0ECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93
cwEIAQACAAAAAAAoAQAjU1RfZTg3NzZiNGJlNDhmNDJhNDhmMzIyMGVlOWI3NjBhYjgAAAUBAAAA
ABYBABFDb3B5cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBU
DhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjW0AAAAzsrvvgEAAACRAAAA
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAiDkA
AAAAAAAAAAAAojkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQ5AAAAAAAAAAAAAAAAX0NvckRs
bE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAzmNxHAAAAQDOY3EcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwBlADgANwA3ADYAYgA0AGIAZQA0ADgAZgA0ADIAYQA0ADgAZgAzADIAMgAwAGUAZQA5AGIA
NwA2ADAAYQBiADgAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAy
ADgAMQAuADIANQA1ADUAMAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwBlADgANwA3ADYAYgA0AGIAZQA0ADgAZgA0ADIAYQA0ADgAZgAzADIAMgAwAGUAZQA5AGIANwA2
ADAAYQBiADgALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGUAOAA3ADcANgBiADQAYgBlADQAOABmADQAMgBhADQAOABmADMAMgAyADAAZQBl
ADkAYgA3ADYAMABhAGIAOAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwBlADgANwA3ADYAYgA0AGIAZQA0ADgAZgA0ADIAYQA0ADgAZgAzADIAMgAwAGUAZQA5
AGIANwA2ADAAYQBiADgAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMgA4ADEALgAyADUANQA1ADAAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAMgA4ADEALgAyADUANQA1ADAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAtDkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="210"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="217"
            Column="25" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="209"
            Column="29" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{92730CBE-9B4F-4F7C-991F-35B43371BDCC}"
      DTS:From="Package\GET_FILE_NAME"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\EXCEL_to_STG" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{A5EA6F26-CB05-43A5-AB4B-0D63738285DE}"
      DTS:From="Package\EXCEL_to_STG"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\STG_to_DWH" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{39ED0D27-4C46-4D4D-80F0-B5B83042CAC5}"
      DTS:From="Package\STG_to_DWH"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Remove_File" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{B0A6F0AD-C3F3-4500-A9EB-94C91E93C910}"
      DTS:From="Package\Remove_File"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Mail" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="155.5,42"
          Id="Package\EXCEL_to_STG"
          TopLeft="132,58.4999997094274" />
        <NodeLayout
          Size="164.5,42"
          Id="Package\GET_FILE_NAME"
          TopLeft="26,6.49999996771415" />
        <NodeLayout
          Size="173.5,42"
          Id="Package\GET_FILE_NAME 1"
          TopLeft="20,134.874999330069" />
        <NodeLayout
          Size="98.5,42"
          Id="Package\Mail"
          TopLeft="455,208.791665743829" />
        <NodeLayout
          Size="141,42"
          Id="Package\Remove_File"
          TopLeft="347.5,155.99999922514" />
        <NodeLayout
          Size="146,42"
          Id="Package\STG_to_DWH"
          TopLeft="236,108.333332795236" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="190.5,27.4999999677142">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="19.25,30.9999997417133"
              Start="0,0"
              End="19.25,23.4999997417133">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="15.25,0" />
                  <mssgle:CubicBezierSegment
                    Point1="15.25,0"
                    Point2="19.25,0"
                    Point3="19.25,4" />
                  <mssgle:LineSegment
                    End="19.25,23.4999997417133" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="287.5,79.4999997094274">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="21.5,28.8333330858086"
              Start="0,0"
              End="21.5,21.3333330858086">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="17.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="17.5,0"
                    Point2="21.5,0"
                    Point3="21.5,4" />
                  <mssgle:LineSegment
                    End="21.5,21.3333330858086" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="382,129.333332795236">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="36,26.666666429904"
              Start="0,0"
              End="36,19.166666429904">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="32,0" />
                  <mssgle:CubicBezierSegment
                    Point1="32,0"
                    Point2="36,0"
                    Point3="36,4" />
                  <mssgle:LineSegment
                    End="36,19.166666429904" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="488.5,176.99999922514">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.75,31.791666518689"
              Start="0,0"
              End="15.75,24.291666518689">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="11.75,0" />
                  <mssgle:CubicBezierSegment
                    Point1="11.75,0"
                    Point2="15.75,0"
                    Point3="15.75,4" />
                  <mssgle:LineSegment
                    End="15.75,24.291666518689" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>